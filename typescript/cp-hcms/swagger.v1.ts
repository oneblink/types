/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    /** Get the user resources. */
    get: operations["Users_GetUserResources"];
  };
  "/users": {
    /**
     * Get users by query. 
     * @description Search the user by query that contains the email address or the part of the email address.
     */
    get: operations["Users_GetUsers"];
  };
  "/users/{id}": {
    /** Get user by id. */
    get: operations["Users_GetUser"];
  };
  "/users/{id}/picture": {
    /** Get user picture by id. */
    get: operations["Users_GetUserPicture"];
  };
  "/ui/settings": {
    /** Get ui settings. */
    get: operations["UI_GetSettings"];
  };
  "/apps/{app}/ui/settings": {
    /** Get ui settings for a specific app. */
    get: operations["UI_GetAppSettings"];
  };
  "/apps/{app}/ui/settings/me": {
    /** Get my ui settings. */
    get: operations["UI_GetUserSettings"];
  };
  "/apps/{app}/ui/settings/{key}": {
    /** Set ui settings. */
    put: operations["UI_PutSetting"];
    /** Remove ui settings. */
    delete: operations["UI_DeleteSetting"];
  };
  "/apps/{app}/ui/settings/me/{key}": {
    /** Set my ui settings. */
    put: operations["UI_PutUserSetting"];
    /** Remove my ui settings. */
    delete: operations["UI_DeleteUserSetting"];
  };
  "/apps/{app}/translations": {
    /** Translate a text. */
    post: operations["Translations_GetLanguages"];
  };
  "/apps/{app}/tags": {
    /** Get tags for app. */
    get: operations["Tags_GetTags"];
  };
  "/apps/{app}/tags/{id}": {
    /** Get tag by id. */
    get: operations["Tags_GetTag"];
    /**
     * Update tag by id. 
     * @description Setting Display Name to existing tag name will merge the two tags together.
     */
    put: operations["Tags_UpdateTag"];
    /** Delete tag by id. */
    delete: operations["Tags_DeleteTag"];
  };
  "/apps/{app}/usages/log": {
    /** Get api calls as log file. */
    get: operations["Usages_GetLog"];
  };
  "/apps/{app}/usages/calls/{fromDate}/{toDate}": {
    /** Get api calls in date range. */
    get: operations["Usages_GetUsages"];
  };
  "/apps/{app}/usages/storage/today": {
    /** Get total asset size. */
    get: operations["Usages_GetCurrentStorageSize"];
  };
  "/apps/{app}/usages/storage/{fromDate}/{toDate}": {
    /** Get asset usage by date. */
    get: operations["Usages_GetStorageSizes"];
  };
  "/apps/{app}/search": {
    /** Get search results. */
    get: operations["Search_GetSchemas"];
  };
  "/apps/{app}/all": {
    /**
     * Get Content and Assets. 
     * @description Get all assets and content for the app.
     */
    get: operations["Search_GetAllContentAndAssets"];
  };
  "/apps/{app}/content-types/{name}/fields": {
    /** Add a content type field. */
    post: operations["ContentTypeFields_PostField"];
  };
  "/apps/{app}/content-types/{name}/fields/{parentId}/nested": {
    /** Add a nested field. */
    post: operations["ContentTypeFields_PostNestedField"];
  };
  "/apps/{app}/content-types/{name}/fields/ui": {
    /** Configure UI fields. */
    put: operations["ContentTypeFields_PutContentTypeUIFields"];
  };
  "/apps/{app}/content-types/{name}/fields/ordering": {
    /** Reorders the fields. */
    put: operations["ContentTypeFields_PutContentTypeFieldOrdering"];
  };
  "/apps/{app}/content-types/{name}/fields/{parentId}/nested/ordering": {
    /** Reorders the nested fields. */
    put: operations["ContentTypeFields_PutNestedFieldOrdering"];
  };
  "/apps/{app}/content-types/{name}/fields/{id}": {
    /** Update a content type field. */
    put: operations["ContentTypeFields_PutField"];
    /** Delete a content type field. */
    delete: operations["ContentTypeFields_DeleteField"];
  };
  "/apps/{app}/content-types/{name}/fields/{parentId}/nested/{id}": {
    /** Update a nested field. */
    put: operations["ContentTypeFields_PutNestedField"];
    /** Delete a nested field. */
    delete: operations["ContentTypeFields_DeleteNestedField"];
  };
  "/apps/{app}/content-types/{name}/fields/{id}/lock": {
    /**
     * Lock a content type field. 
     * @description A locked field cannot be updated or deleted.
     */
    put: operations["ContentTypeFields_LockField"];
  };
  "/apps/{app}/content-types/{name}/fields/{parentId}/nested/{id}/lock": {
    /**
     * Lock a nested field. 
     * @description A locked field cannot be edited or deleted.
     */
    put: operations["ContentTypeFields_LockNestedField"];
  };
  "/apps/{app}/content-types/{name}/fields/{id}/hide": {
    /**
     * Hide a content type field. 
     * @description A hidden field is not part of the API response, but can still be edited in the portal.
     */
    put: operations["ContentTypeFields_HideField"];
  };
  "/apps/{app}/content-types/{name}/fields/{parentId}/nested/{id}/hide": {
    /**
     * Hide a nested field. 
     * @description A hidden field is not part of the API response, but can still be edited in the portal.
     */
    put: operations["ContentTypeFields_HideNestedField"];
  };
  "/apps/{app}/content-types/{name}/fields/{id}/show": {
    /**
     * Show a content type field. 
     * @description A hidden field is not part of the API response, but can still be edited in the portal.
     */
    put: operations["ContentTypeFields_ShowField"];
  };
  "/apps/{app}/content-types/{name}/fields/{parentId}/nested/{id}/show": {
    /**
     * Show a nested field. 
     * @description A hidden field is not part of the API response, but can still be edited in the portal.
     */
    put: operations["ContentTypeFields_ShowNestedField"];
  };
  "/apps/{app}/content-types/{name}/fields/{id}/enable": {
    /**
     * Enable a content type field. 
     * @description A disabled field cannot not be edited in the CivicPlus portal anymore, but will be part of the API response.
     */
    put: operations["ContentTypeFields_EnableField"];
  };
  "/apps/{app}/content-types/{name}/fields/{parentId}/nested/{id}/enable": {
    /**
     * Enable a nested field. 
     * @description A disabled field cannot not be edited in the CivicPlus portal anymore, but will be part of the API response.
     */
    put: operations["ContentTypeFields_EnableNestedField"];
  };
  "/apps/{app}/content-types/{name}/fields/{id}/disable": {
    /**
     * Disable a content type field. 
     * @description A disabled field cannot not be edited in the CivicPlus portal anymore, but will be part of the API response.
     */
    put: operations["ContentTypeFields_DisableField"];
  };
  "/apps/{app}/content-types/{name}/fields/{parentId}/nested/{id}/disable": {
    /**
     * Disable a nested field. 
     * @description A disabled field cannot not be edited in the CivicPlus portal anymore, but will be part of the API response.
     */
    put: operations["ContentTypeFields_DisableNestedField"];
  };
  "/apps/{app}/content-types/{name}/fields/{id}/unlock": {
    /**
     * Unlock a Content Type field. 
     * @description An unlocked field can be edited in the CivicPlus portal.
     */
    put: operations["ContentTypeFields_UnlockField"];
  };
  "/apps/{app}/content-types/{name}/fields/{parentId}/nested/{id}/unlock": {
    /**
     * Unlock a Nested Content Type field. 
     * @description An unlocked field can be edited in the CivicPlus portal.
     */
    put: operations["ContentTypeFields_UnlockNestedField"];
  };
  "/apps/{app}/content-types/{name}/fields/{id}/encrypt": {
    /**
     * Encrypt a field. 
     * @description Only string fields can be encrypted and an encrypted field cannot be null.
     */
    put: operations["ContentTypeFields_EncryptField"];
  };
  "/apps/{app}/content-types/{name}/fields/{parentId}/nested/{id}/encrypt": {
    /**
     * Encrypt a nested field. 
     * @description Only string fields can be encrypted and an encrypted field cannot be null.
     */
    put: operations["ContentTypeFields_EncryptNestedField"];
  };
  "/apps/{app}/content-types": {
    /** Get content types. */
    get: operations["ContentTypes_GetContentTypes"];
    /** Create a new content type. */
    post: operations["ContentTypes_PostContentType"];
  };
  "/apps/{app}/content-types/{name}": {
    /** Get a content type by name. */
    get: operations["ContentTypes_GetContentType"];
    /** Update a content type. */
    put: operations["ContentTypes_PutContentType"];
    /** Delete a content type. */
    delete: operations["ContentTypes_DeleteContentType"];
  };
  "/apps/{app}/content-types/{name}/sync": {
    /** Synchronize a content type. */
    put: operations["ContentTypes_PutContentTypeSync"];
  };
  "/apps/{app}/content-types/{name}/section": {
    /** Update a content type section. */
    put: operations["ContentTypes_PutCategory"];
  };
  "/apps/{app}/content-types/{name}/preview-urls": {
    /** Update the preview urls. */
    put: operations["ContentTypes_PutPreviewUrls"];
  };
  "/apps/{app}/content-types/{name}/scripts": {
    /** Update the scripts. */
    put: operations["ContentTypes_PutScripts"];
  };
  "/apps/{app}/content-types/{name}/publish": {
    /** Publish a content type. */
    put: operations["ContentTypes_PublishContentType"];
  };
  "/apps/{app}/content-types/{name}/unpublish": {
    /** Unpublish a content type. */
    put: operations["ContentTypes_UnpublishContentType"];
  };
  "/apps/{app}/permissionset": {
    /** Get app permission sets. */
    get: operations["PermissionSet_GetPermissionSets"];
    /** Add permission set to app. */
    post: operations["PermissionSet_PostPermissionSet"];
  };
  "/apps/{app}/permissionset/{id}": {
    /** Get single permission set. */
    get: operations["PermissionSet_GetPermissionSet"];
    /** Update permission set. */
    put: operations["PermissionSet_PutPermissionSet"];
    /** Remove permission set from app. */
    delete: operations["PermissionSet_DeletePermissionSet"];
  };
  "/apps/{app}/permissionset/{id}/group": {
    /** Update permission set group permission. */
    put: operations["PermissionSet_PutPermissionSetGroup"];
  };
  "/apps/{app}/permissionset/{id}/client": {
    /** Update permission set client permission. */
    put: operations["PermissionSet_PutPermissionSetClient"];
  };
  "/languages": {
    /**
     * Get supported languages. 
     * @description Provide a list of supported language codes, following the ISO2Code standard.
     */
    get: operations["Languages_GetLanguages"];
  };
  "/apps/{app}/history": {
    /** Get historical events. */
    get: operations["History_GetHistory"];
  };
  "/content/{app}/graphql": {
    /**
     * GraphQL endpoint. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    get: operations["Contents_PostGraphQLGET"];
    /**
     * GraphQL endpoint. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    post: operations["Contents_PostGraphQLPOST"];
  };
  "/content/{app}/graphql/batch": {
    /**
     * GraphQL endpoint (Batch). 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    get: operations["Contents_PostGraphQLBatchGET"];
    /**
     * GraphQL endpoint (Batch). 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    post: operations["Contents_PostGraphQLBatchPOST"];
  };
  "/content/{app}": {
    /**
     * Queries contents. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    get: operations["Contents_GetAllContents"];
    /**
     * Queries contents. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    post: operations["Contents_GetAllContentsPost"];
  };
  "/content/{app}/{name}": {
    /**
     * Queries contents. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    get: operations["Contents_GetContents"];
    /**
     * Create a content item. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    post: operations["Contents_PostContent"];
  };
  "/content/{app}/{name}/query": {
    /**
     * Queries contents. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    post: operations["Contents_GetContentsPost"];
  };
  "/content/{app}/{name}/{id}": {
    /**
     * Get a content item. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    get: operations["Contents_GetContentGET"];
    /**
     * Update a content item. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    put: operations["Contents_PutContent"];
    /**
     * Delete a content item. 
     * @description You can create an generated documentation for your app at /api/content/{appName}/docs.
     */
    delete: operations["Contents_DeleteContent"];
    /**
     * Get a content item. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    head: operations["Contents_GetContentHEAD"];
    /**
     * Patchs a content item. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    patch: operations["Contents_PatchContent"];
  };
  "/content/{app}/{name}/{id}/{version}": {
    /**
     * Get a content by version. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    get: operations["Contents_GetContentVersion"];
  };
  "/content/{app}/{name}/bulk": {
    /**
     * Bulk insert/update content items. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    post: operations["Contents_BulkContents"];
  };
  "/content/{app}/{name}/{id}/status": {
    /**
     * Change status for a content item. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    put: operations["Contents_PutContentStatus"];
  };
  "/content/{app}/{name}/{id}/draft": {
    /**
     * Create a new version. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    post: operations["Contents_CreateDraft"];
    /**
     * Discard changes. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    delete: operations["Contents_DeleteVersion"];
  };
  "/content/{app}/{name}/{id}/tags": {
    /** Generate Tags from Content. */
    post: operations["Contents_GenerateTagsForContent"];
  };
  "/content/{app}/{name}/{id}/updatenotification": {
    /**
     * Updates the NotificationDetails of a content item. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    put: operations["Contents_UpdateNotification"];
  };
  "/content/{app}/{name}/{id}/clearschedule": {
    /** Clear Content Schedule. */
    put: operations["Contents_ClearSchedule"];
  };
  "/content/{app}/{name}/permissions": {
    /** Gets the user permissions for the content type. */
    get: operations["Contents_GetPermissions"];
  };
  "/content/{app}/{name}/{id}/decrypt": {
    /** Decrypts all encrypted fields of the content item. */
    get: operations["Contents_DecryptContent"];
  };
  "/content/{app}/{name}/{id}/{status}": {
    /**
     * Change status for a content item.
     * Obsolete - Update to use the /status endpoint 
     * @deprecated 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    put: operations["Contents_PutContentStatusString"];
  };
  "/content/{app}/{name}/tags": {
    /**
     * Get content tags. 
     * @description Get all tags for a content type.
     */
    get: operations["Contents_GetTags"];
  };
  "/apps/{app}/categories": {
    /** Get app categories. */
    get: operations["Categories_GetCategories"];
    /** Add category to app. */
    post: operations["Categories_PostCategory"];
  };
  "/apps/{app}/categories/{id}": {
    /** Get single category. */
    get: operations["Categories_GetCategory"];
    /** Update category. */
    put: operations["Categories_PutCategory"];
    /** Remove category from app. */
    delete: operations["Categories_DeleteCategory"];
  };
  "/apps/{app}/backups/{id}": {
    /** Get the backup content. */
    get: operations["BackupContent_GetBackupContent"];
    /** Delete a backup. */
    delete: operations["Backups_DeleteBackup"];
  };
  "/apps/{app}/backups": {
    /** Get all backup jobs. */
    get: operations["Backups_GetBackups"];
    /** Start a new backup. */
    post: operations["Backups_PostBackup"];
  };
  "/apps/restore": {
    /** Get current restore status. */
    get: operations["Restore_GetRestoreJob"];
    /** Restore a backup. */
    post: operations["Restore_PostRestoreJob"];
  };
  "/assets/{app}/{idOrSlug}/{more}": {
    /** Get the asset content. */
    get: operations["AssetContent_GetAssetContentBySlug"];
  };
  "/assets/{id}": {
    /** Get the asset content. */
    get: operations["AssetContent_GetAssetContent"];
  };
  "/apps/{app}/assets/tags": {
    /**
     * Get assets tags. 
     * @description Get all tags for assets.
     */
    get: operations["Assets_GetTags"];
  };
  "/apps/{app}/assets": {
    /**
     * Get assets. 
     * @description Get all assets for the app.
     */
    get: operations["Assets_GetAssets"];
    /**
     * Upload a new asset. 
     * @description You can only upload one file at a time. The mime type of the file is not calculated by CivicPlus and is required correctly.
     */
    post: operations["Assets_PostAsset"];
  };
  "/apps/{app}/assets/query": {
    /**
     * Get assets. 
     * @description Get all assets for the app.
     */
    post: operations["Assets_GetAssetsPost"];
  };
  "/apps/{app}/assets/{id}": {
    /** Get an asset by id. */
    get: operations["Assets_GetAsset"];
    /** Updates the asset. */
    put: operations["Assets_PutAsset"];
    /** Delete an asset. */
    delete: operations["Assets_DeleteAsset"];
  };
  "/apps/{app}/assets/{id}/content": {
    /**
     * Replace asset content. 
     * @description Use multipart request to upload an asset.
     */
    put: operations["Assets_PutAssetContent"];
  };
  "/apps/{app}/assets/{id}/draft": {
    /** Create a new version. */
    post: operations["Assets_CreateDraft"];
    /** Discard changes. */
    delete: operations["Assets_DeleteDraft"];
  };
  "/apps/{app}/assets/{id}/status": {
    /** Update status. */
    put: operations["Assets_PutAssetStatus"];
  };
  "/apps/{app}/assets/suggestions": {
    /**
     * Analyze asset and retrieve tags and descriptions. 
     * @description You can only analyze one file at a time.
     */
    post: operations["Assets_Suggestions"];
  };
  "/apps/{app}/assets/permissions": {
    /** Gets the user permissions for the asset. */
    get: operations["Assets_GetPermissions"];
  };
  "/apps/{app}/assets/{id}/clearschedule": {
    /** Clear Asset Schedule. */
    put: operations["Assets_ClearSchedule"];
  };
  "/apps/{app}/assets/{id}/updatenotification": {
    /** Updates the NotificationDetails of an asset. */
    put: operations["Assets_UpdateNotification"];
  };
  "/apps/{app}/assets/{id}/{status}": {
    /**
     * Update asset status. 
     * @deprecated
     */
    put: operations["Assets_PutAssetStringStatus"];
  };
  "/apps/{app}/assets/encrypt/{id}": {
    /**
     * Get an encrypted asset by id. 
     * @deprecated
     */
    get: operations["AssetsEncrypted_GetAsset"];
    /**
     * Updates the encrypted asset metadata. 
     * @deprecated
     */
    put: operations["AssetsEncrypted_PutAssetPUT"];
    /**
     * Delete an encrypted asset. 
     * @deprecated
     */
    delete: operations["AssetsEncrypted_DeleteAsset"];
    /**
     * Updates the encrypted asset metadata. 
     * @deprecated
     */
    patch: operations["AssetsEncrypted_PutAssetPATCH"];
  };
  "/apps/{app}/assets/encrypt": {
    /**
     * Upload a new encrypted asset. 
     * @deprecated 
     * @description You can only upload one file at a time. The mime type of the file is not calculated by CivicPlus and is required correctly.
     */
    post: operations["AssetsEncrypted_PostAsset"];
  };
  "/apps/{app}/assets/encrypt/{id}/{more}": {
    /**
     * Download an encrypted asset. 
     * @deprecated
     */
    get: operations["AssetsEncrypted_GetAssetContent"];
  };
  "/apps/{app}/clients": {
    /**
     * Get app clients. 
     * @description Gets all configured clients for the app with the specified name.
     */
    get: operations["AppClients_GetClients"];
    /**
     * Create a new app client. 
     * @description Create a new client for the app with the specified name.
     * The client secret is auto generated on the server and returned. The client does not exire, the access token is valid for 30 days.
     */
    post: operations["AppClients_PostClient"];
  };
  "/apps/{app}/clients/{id}": {
    /**
     * Updates an app client. 
     * @description Only the display name can be changed, create a new client if necessary.
     */
    put: operations["AppClients_PutClient"];
    /**
     * Revoke an app client. 
     * @description The application that uses this client credentials cannot access the API after it has been revoked.
     */
    delete: operations["AppClients_DeleteClient"];
  };
  "/apps/{app}/contributors": {
    /** Get app contributors. */
    get: operations["AppContributors_GetContributors"];
    /** Assign contributor to app. */
    post: operations["AppContributors_PostContributor"];
  };
  "/apps/{app}/contributors/{id}": {
    /** Remove contributor. */
    delete: operations["AppContributors_DeleteContributor"];
  };
  "/apps/{app}/languages": {
    /** Get app languages. */
    get: operations["AppLanguages_GetLanguages"];
    /** Attaches an app language. */
    post: operations["AppLanguages_PostLanguage"];
  };
  "/apps/{app}/languages/{language}": {
    /** Updates an app language. */
    put: operations["AppLanguages_PutLanguage"];
    /** Deletes an app language. */
    delete: operations["AppLanguages_DeleteLanguage"];
  };
  "/apps/{app}/patterns": {
    /**
     * Get app patterns. 
     * @description Gets all configured regex patterns for the app with the specified name.
     */
    get: operations["AppPatterns_GetPatterns"];
    /** Create a new app pattern. */
    post: operations["AppPatterns_PostPattern"];
  };
  "/apps/{app}/patterns/{id}": {
    /** Update an app pattern. */
    put: operations["AppPatterns_PutPattern"];
    /**
     * Delete an app pattern. 
     * @description Content Types using this pattern will still function using the same Regular Expression.
     */
    delete: operations["AppPatterns_DeletePattern"];
  };
  "/apps/{app}/roles": {
    /** Get app roles. */
    get: operations["AppRoles_GetRoles"];
    /** Add role to app. */
    post: operations["AppRoles_PostRole"];
  };
  "/apps/{app}/roles/permissions": {
    /** Get app permissions. */
    get: operations["AppRoles_GetPermissions"];
  };
  "/apps/{app}/roles/{roleName}": {
    /** Update an app role. */
    put: operations["AppRoles_PutRole"];
    /** Remove role from app. */
    delete: operations["AppRoles_DeleteRole"];
  };
  "/apps": {
    /**
     * Get your apps. 
     * @description You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow).
     * You will retrieve all apps, where you are assigned as a contributor.
     */
    get: operations["Apps_GetApps"];
    /**
     * Create a new app. 
     * @description You can only create an app when you are authenticated as a user (OpenID implicit flow).
     * You will be assigned as owner of the new app automatically.
     */
    post: operations["Apps_PostApp"];
  };
  "/apps/{app}": {
    /** Get an app by name. */
    get: operations["Apps_GetApp"];
    /** Update the app. */
    put: operations["Apps_UpdateApp"];
    /** Archive the app. */
    delete: operations["Apps_DeleteApp"];
  };
  "/apps/{app}/image": {
    /** Get the app image. */
    get: operations["Apps_GetImage"];
    /** Get the app image. */
    post: operations["Apps_UploadImage"];
    /** Remove the app image. */
    delete: operations["Apps_DeleteImage"];
  };
  "/apps/{app}/workflows": {
    /** Get app workflow. */
    get: operations["AppWorkflows_GetWorkflows"];
    /** Create a workflow. */
    post: operations["AppWorkflows_PostWorkflow"];
  };
  "/apps/{app}/workflows/{id}": {
    /** Update a workflow. */
    put: operations["AppWorkflows_PutWorkflow"];
    /** Delete a workflow. */
    delete: operations["AppWorkflows_DeleteWorkflow"];
  };
  "/apps/{app}/groups": {
    /** Get app groups. */
    get: operations["AppGroups_GetGroups"];
  };
  "/apps/{app}/groups/assign": {
    /** Assign a group to an app level role. */
    put: operations["AppGroups_AssignRole"];
  };
  "/apps/{app}/groups/users/{id}": {
    /** Get group users. */
    get: operations["AppGroups_GetGroupUsers"];
  };
  "/apps/{app}/groups/sync": {
    /** Get group users. */
    post: operations["AppGroups_Sync"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    UserProperty: {
      name: string;
      value: string;
    };
    AccessTokenDto: {
      accessToken?: string;
      idToken?: string;
    };
    UsersDto: components["schemas"]["Resource"] & {
      /**
       * Format: int64 
       * @description The total number of users.
       */
      total?: number;
      /** @description The users. */
      items: (components["schemas"]["UserDto"])[];
    };
    UserDto: components["schemas"]["Resource"] & {
      /** @description The id of the user. */
      id: string;
      /** @description The email of the user. Unique value. */
      email: string;
      /** @description The display name (usually first name and last name) of the user. */
      displayName: string;
      /** @description Determines if the user is locked. */
      isLocked: boolean;
      /** @description Additional permissions for the user. */
      permissions: (string)[];
    };
    Resource: {
      /** @description The links. */
      _links: {
        [key: string]: components["schemas"]["ResourceLink"] | undefined;
      };
    };
    ResourceLink: {
      /** @description The link url. */
      href: string;
      /** @description The link method. */
      method: string;
      /** @description Additional data about the link. */
      metadata?: string | null;
    };
    CreateUserDto: {
      /**
       * Format: email 
       * @description The email of the user. Unique value.
       */
      email: string;
      /** @description The display name (usually first name and last name) of the user. */
      displayName: string;
      /** @description The password of the user. */
      password: string;
      /** @description Additional permissions for the user. */
      permissions: (string)[];
    };
    UpdateUserDto: {
      /**
       * Format: email 
       * @description The email of the user. Unique value.
       */
      email: string;
      /** @description The display name (usually first name and last name) of the user. */
      displayName: string;
      /** @description The password of the user. */
      password?: string | null;
      /** @description Additional permissions for the user. */
      permissions: (string)[];
    };
    EventConsumersDto: components["schemas"]["Resource"] & {
      /** @description The event consumers. */
      items?: (components["schemas"]["EventConsumerDto"])[];
    };
    EventConsumerDto: components["schemas"]["Resource"] & ({
      isStopped?: boolean;
      isResetting?: boolean;
      name?: string;
      error?: string | null;
      position?: string | null;
    });
    ResourcesDto: components["schemas"]["Resource"] & Record<string, never>;
    UISettingsDto: {
      /** @description True when the user can create apps. */
      canCreateApps?: boolean;
    };
    UpdateSettingDto: {
      /** @description The value for the setting. */
      value?: Record<string, never>;
    };
    TranslationDto: {
      /** @description The result of the translation. */
      result?: components["schemas"]["TranslationResult"];
      /** @description The translated text. */
      text?: string | null;
    };
    /** @enum {string} */
    TranslationResult: "Translated" | "LanguageNotSupported" | "NotTranslated" | "NotImplemented" | "Failed";
    TranslateDto: {
      /** @description The text to translate. */
      text: string;
      /** @description The target language. */
      targetLanguage: string;
      /** @description The optional source language. */
      sourceLanguage?: string;
    };
    TagsDto: components["schemas"]["Resource"] & {
      /** @description Tags. */
      items?: (components["schemas"]["TagDto"])[];
      /**
       * Format: int64 
       * @description The total number of Tags.
       */
      total?: number;
    };
    TagDto: components["schemas"]["Resource"] & {
      id?: string;
      name?: string;
      displayName?: string;
      /** Format: int32 */
      count?: number;
      /** Format: int32 */
      assetCount?: number;
      /** Format: int32 */
      contentCount?: number;
    };
    UpdateTagDto: {
      displayName?: string;
    };
    LogDownloadDto: {
      /** @description The url to download the log. */
      downloadUrl?: string | null;
    };
    CallsUsageDtoDto: {
      /**
       * Format: int64 
       * @description The total number of API calls.
       */
      totalCalls?: number;
      /**
       * Format: int64 
       * @description The total number of bytes transferred.
       */
      totalBytes?: number;
      /**
       * Format: int64 
       * @description The allowed API calls.
       */
      allowedCalls?: number;
      /**
       * Format: double 
       * @description The average duration in milliseconds.
       */
      averageElapsedMs?: number;
      /** @description The statistics by date and group. */
      details: {
        [key: string]: (components["schemas"]["CallsUsagePerDateDto"])[] | undefined;
      };
    };
    CallsUsagePerDateDto: {
      /**
       * Format: date-time 
       * @description The date when the usage was tracked.
       */
      date?: string;
      /**
       * Format: int64 
       * @description The total number of API calls.
       */
      totalCalls?: number;
      /**
       * Format: int64 
       * @description The total number of bytes transferred.
       */
      totalBytes?: number;
      /**
       * Format: double 
       * @description The average duration in milliseconds.
       */
      averageElapsedMs?: number;
    };
    CurrentStorageDto: {
      /**
       * Format: int64 
       * @description The size in bytes.
       */
      size?: number;
      /**
       * Format: int64 
       * @description The maximum allowed asset size.
       */
      maxAllowed?: number;
    };
    StorageUsagePerDateDto: {
      /**
       * Format: date-time 
       * @description The date when the usage was tracked.
       */
      date?: string;
      /**
       * Format: int64 
       * @description The number of assets.
       */
      totalCount?: number;
      /**
       * Format: int64 
       * @description The size in bytes.
       */
      totalSize?: number;
    };
    SearchResultDto: components["schemas"]["Resource"] & ({
      /** @description The name of the search result. */
      name: string;
      /** @description The type of the search result. */
      type: components["schemas"]["SearchResultType"];
      /** @description An optional label. */
      label?: string | null;
    });
    /** @enum {string} */
    SearchResultType: "Asset" | "Content" | "Dashboard" | "Setting" | "Rule" | "Schema";
    AllAssetsDto: {
      /**
       * Format: int64 
       * @description The total number of assets.
       */
      total?: number;
      /** @description The assets. */
      items?: (components["schemas"]["IBaseDto"])[];
    };
    IBaseDto: {
      /** Format: guid */
      id?: string;
      createdBy?: string;
      lastModifiedBy?: string;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      lastModified?: string;
      scheduleJob?: components["schemas"]["ScheduleJobDto"];
      permissionSet?: components["schemas"]["PermissionSetDto"];
    };
    ScheduleJobDto: {
      /**
       * Format: guid 
       * @description The id of the schedule job.
       */
      id?: string;
      /** @description The new status. */
      status?: string;
      /**
       * Format: date-time 
       * @description The target date and time when the content should be scheduled.
       */
      dueTime?: string;
      /** @description The color of the scheduled status. */
      color?: string;
      /** @description The user who schedule the content. */
      scheduledBy: string;
    };
    PermissionSetDto: components["schemas"]["Resource"] & {
      /**
       * Format: guid 
       * @description The id of the Permission Set.
       */
      id: string;
      /** @description The name of the Permission Set. */
      name: string;
      /**
       * Format: int64 
       * @description The version of the Permission Set.
       */
      version?: number;
      groupPermissions?: (components["schemas"]["GroupDto"])[];
      clientPermissions?: (components["schemas"]["PermissionSetClientDto"])[];
      userPermissions?: (string)[];
      /**
       * Format: date-time 
       * @description When the Permission Set was last modified.
       */
      lastModified?: string;
      /** @description Who last modified the Permission Set. */
      lastModifiedBy?: string;
    };
    GroupDto: {
      /**
       * Format: guid 
       * @description The id of the group that contributes to the Permission Set.
       */
      groupId: string;
      /** @description The name of the group that contributes to the Permission Set. */
      name: string;
      /** @description The role level as a contributor. */
      role?: string | null;
      /** @description Whether group has encryption access or not. */
      encryption?: boolean;
    };
    PermissionSetClientDto: {
      /** @description The Client name that contributes to the Permission Set. */
      name: string;
      /** @description The permission level as a contributor. */
      role?: string | null;
    };
    ContentTypeDetailsDto: components["schemas"]["ContentTypeDto"] & ({
      /** @description The scripts. */
      scripts: components["schemas"]["ContentTypeScriptsDto"];
      /** @description The preview Urls. */
      previewUrls: {
        [key: string]: string | undefined;
      };
      /** @description The name of fields that are used in content lists. */
      fieldsInLists: (string)[];
      /** @description The name of fields that are used in content references. */
      fieldsInReferences: (string)[];
      /** @description The list of fields. */
      fields: (components["schemas"]["FieldDto"])[];
    });
    ContentTypeScriptsDto: {
      /** @description The script that is executed for each query when querying contents. */
      query?: string | null;
      /** @description The script that is executed when creating a content. */
      create?: string | null;
      /** @description The script that is executed when updating a content. */
      update?: string | null;
      /** @description The script that is executed when deleting a content. */
      delete?: string | null;
      /** @description The script that is executed when change a content status. */
      change?: string | null;
    };
    FieldDto: components["schemas"]["Resource"] & ({
      /**
       * Format: int64 
       * @description The id of the field.
       */
      fieldId?: number;
      /** @description The name of the field. Must be unique within the content type. */
      name: string;
      /** @description Defines if the field is hidden. */
      isHidden?: boolean;
      /** @description Defines if the field is locked. */
      isLocked?: boolean;
      /** @description Defines if the field is disabled. */
      isDisabled?: boolean;
      /** @description Defines if the field is encrypted. */
      isEncrypted?: boolean;
      /** @description Defines the partitioning of the field. */
      partitioning: string;
      /** @description The field properties. */
      properties: {
        fieldType: "FieldDto";
      } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType">;
      /** @description The nested fields. */
      nested?: (components["schemas"]["NestedFieldDto"])[] | null;
    });
    FieldPropertiesDto: {
      /** @description Optional label for the editor. */
      label?: string | null;
      /** @description Hints to describe the content type. */
      hints?: string | null;
      /** @description Placeholder to show when no value has been entered. */
      placeholder?: string | null;
      /** @description Indicates if the field is required. */
      isRequired?: boolean;
      /** @description Optional url to the editor. */
      editorUrl?: string | null;
      /** @description Tags for automation processes. */
      tags?: (string)[] | null;
      fieldType: string;
    };
    ArrayFieldPropertiesDto: {
      fieldType: "ArrayFieldPropertiesDto";
    } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType"> & ({
      /**
       * Format: int32 
       * @description The minimum allowed items for the field value.
       */
      minItems?: number | null;
      /**
       * Format: int32 
       * @description The maximum allowed items for the field value.
       */
      maxItems?: number | null;
    });
    AssetsFieldPropertiesDto: {
      fieldType: "AssetsFieldPropertiesDto";
    } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType"> & ({
      /**
       * Format: int32 
       * @description The minimum allowed items for the field value.
       */
      minItems?: number | null;
      /**
       * Format: int32 
       * @description The maximum allowed items for the field value.
       */
      maxItems?: number | null;
      /**
       * Format: int32 
       * @description The minimum file size in bytes.
       */
      minSize?: number | null;
      /**
       * Format: int32 
       * @description The maximum file size in bytes.
       */
      maxSize?: number | null;
      /**
       * Format: int32 
       * @description The minimum image width in pixels.
       */
      minWidth?: number | null;
      /**
       * Format: int32 
       * @description The maximum image width in pixels.
       */
      maxWidth?: number | null;
      /**
       * Format: int32 
       * @description The minimum image height in pixels.
       */
      minHeight?: number | null;
      /**
       * Format: int32 
       * @description The maximum image height in pixels.
       */
      maxHeight?: number | null;
      /**
       * Format: int32 
       * @description The image aspect width in pixels.
       */
      aspectWidth?: number | null;
      /**
       * Format: int32 
       * @description The image aspect height in pixels.
       */
      aspectHeight?: number | null;
      /** @description Defines if the asset must be an image. */
      mustBeImage?: boolean;
      /** @description True to resolve first asset in the content list. */
      resolveFirst?: boolean;
      /**
       * @deprecated 
       * @description True to resolve first image in the content list.
       */
      resolveImage?: boolean;
      /** @description The allowed file extensions. */
      allowedExtensions?: (string)[] | null;
      /** @description True, if duplicate values are allowed. */
      allowDuplicates?: boolean;
    });
    BooleanFieldPropertiesDto: {
      fieldType: "BooleanFieldPropertiesDto";
    } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType"> & ({
      /** @description The default value for the field value. */
      defaultValue?: boolean | null;
      /** @description Indicates that the inline editor is enabled for this field. */
      inlineEditable?: boolean;
      /** @description The editor that is used to manage this field. */
      editor?: components["schemas"]["BooleanFieldEditor"];
    });
    /** @enum {string} */
    BooleanFieldEditor: "Checkbox" | "Toggle";
    DateTimeFieldPropertiesDto: {
      fieldType: "DateTimeFieldPropertiesDto";
    } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType"> & ({
      /**
       * Format: date-time 
       * @description The default value for the field value.
       */
      defaultValue?: string | null;
      /**
       * Format: date-time 
       * @description The maximum allowed value for the field value.
       */
      maxValue?: string | null;
      /**
       * Format: date-time 
       * @description The minimum allowed value for the field value.
       */
      minValue?: string | null;
      /** @description The editor that is used to manage this field. */
      editor?: components["schemas"]["DateTimeFieldEditor"];
      /** @description The calculated default value for the field value. */
      calculatedDefaultValue?: components["schemas"]["DateTimeCalculatedDefaultValue"];
    });
    /** @enum {string} */
    DateTimeFieldEditor: "Date" | "DateTime";
    /** @enum {string} */
    DateTimeCalculatedDefaultValue: "Now" | "Today";
    DateTimeRangeFieldPropertiesDto: {
      fieldType: "DateTimeRangeFieldPropertiesDto";
    } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType"> & {
      /** @description The editor that is used to manage this field. */
      editor?: components["schemas"]["DateTimeRangeFieldEditor"];
      allowRecurring?: boolean;
    };
    /** @enum {string} */
    DateTimeRangeFieldEditor: "DateRange" | "DateTimeRange";
    GeolocationFieldPropertiesDto: {
      fieldType: "GeolocationFieldPropertiesDto";
    } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType"> & ({
      /** @description The default value for the field value. */
      defaultValue?: boolean | null;
      /** @description Toggle whether the field should diplay the Address1 input. */
      showAddress1?: boolean;
      /** @description Toggle whether the field should display the Addres2 input. */
      showAddress2?: boolean;
      /** @description Toggle whether the field should display the City input. */
      showCity?: boolean;
      /** @description Toggle whether the field should display the State input. */
      showState?: boolean;
      /** @description Toggle whether the field should display the Zip/Postal Code input. */
      showZipCode?: boolean;
      /** @description The pattern to enforce a specific format for the ZIP Code portion of this field value. */
      zipCodePattern?: string;
      /** @description The validation message for the ZIP Code portion of this field value. */
      zipCodePatternMessage?: string;
      /** @description The pattern to enforce a specific format for the State portion of this field value. */
      statePattern?: string;
      /** @description The validation message for the State portion of this field value. */
      statePatternMessage?: string;
      /** @description The editor that is used to manage this field. */
      editor?: components["schemas"]["GeolocationFieldEditor"];
    });
    /** @enum {string} */
    GeolocationFieldEditor: "Map" | "NoMap";
    JsonFieldPropertiesDto: {
      fieldType: "JsonFieldPropertiesDto";
    } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType"> & Record<string, never>;
    LinkFieldPropertiesDto: {
      fieldType: "LinkFieldPropertiesDto";
    } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType"> & {
      /** @description The editor that is used to manage this field. */
      editor?: components["schemas"]["LinkFieldEditor"];
    };
    /** @enum {string} */
    LinkFieldEditor: "Link";
    MultiFieldPropertiesDto: {
      fieldType: "MultiFieldPropertiesDto";
    } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType"> & {
      /** @description The allowed values. */
      allowedValues?: (string)[];
      /** @description The default value for the field value. */
      defaultValue?: (string)[];
      /** @description The editor that is used to manage this field. */
      editor?: components["schemas"]["MultiFieldEditor"];
    };
    /** @enum {string} */
    MultiFieldEditor: "Multi";
    NumberFieldPropertiesDto: {
      fieldType: "NumberFieldPropertiesDto";
    } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType"> & ({
      /**
       * Format: double 
       * @description The default value for the field value.
       */
      defaultValue?: number | null;
      /**
       * Format: double 
       * @description The maximum allowed value for the field value.
       */
      maxValue?: number | null;
      /**
       * Format: double 
       * @description The minimum allowed value for the field value.
       */
      minValue?: number | null;
      /** @description The allowed values for the field value. */
      allowedValues?: (number)[] | null;
      /** @description Indicates if the field value must be unique. Ignored for nested fields and localized fields. */
      isUnique?: boolean;
      /** @description Indicates that the inline editor is enabled for this field. */
      inlineEditable?: boolean;
      /** @description The editor that is used to manage this field. */
      editor?: components["schemas"]["NumberFieldEditor"];
      /** @description The masking type used for a masked field value. */
      mask?: string;
    });
    /** @enum {string} */
    NumberFieldEditor: "Input" | "Radio" | "Dropdown" | "Stars" | "MaskedInput";
    NumberRangeFieldPropertiesDto: {
      fieldType: "NumberRangeFieldPropertiesDto";
    } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType"> & ({
      /** @description The masking type used for a masked string value. */
      mask?: string;
      /**
       * Format: double 
       * @description The maximum allowed value for the field value.
       */
      maxValue?: number | null;
      /**
       * Format: double 
       * @description The minimum allowed value for the field value.
       */
      minValue?: number | null;
      /** @description Optional from placeholder for range based editors. */
      placeholderFrom?: string;
      /** @description Optional to placeholder for range based editors. */
      placeholderTo?: string;
      /** @description The editor that is used to manage this field. */
      editor?: components["schemas"]["NumberRangeFieldEditor"];
    });
    /** @enum {string} */
    NumberRangeFieldEditor: "Number" | "MaskedInput";
    ReferencesFieldPropertiesDto: {
      fieldType: "ReferencesFieldPropertiesDto";
    } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType"> & ({
      /**
       * Format: int32 
       * @description The minimum allowed items for the field value.
       */
      minItems?: number | null;
      /**
       * Format: int32 
       * @description The maximum allowed items for the field value.
       */
      maxItems?: number | null;
      /** @description True, if duplicate values are allowed. */
      allowDuplicates?: boolean;
      /** @description True to resolve references in the content list. */
      resolveReference?: boolean;
      /** @description The editor that is used to manage this field. */
      editor?: components["schemas"]["ReferencesFieldEditor"];
      /** @description The id of the referenced content types. */
      contentTypeIds?: (string)[] | null;
    });
    /** @enum {string} */
    ReferencesFieldEditor: "List" | "Dropdown" | "Tags" | "Checkboxes" | "Modal" | "Form";
    StringFieldPropertiesDto: {
      fieldType: "StringFieldPropertiesDto";
    } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType"> & ({
      /** @description The default value for the field value. */
      defaultValue?: string | null;
      /** @description The pattern to enforce a specific format for the field value. */
      pattern?: string | null;
      /** @description The validation message for the pattern. */
      patternMessage?: string | null;
      /**
       * Format: int32 
       * @description The minimum allowed length for the field value.
       */
      minLength?: number | null;
      /**
       * Format: int32 
       * @description The maximum allowed length for the field value.
       */
      maxLength?: number | null;
      /** @description The allowed values for the field value. */
      allowedValues?: (string)[] | null;
      /** @description Indicates if the field value must be unique. Ignored for nested fields and localized fields. */
      isUnique?: boolean;
      /** @description Indicates that the inline editor is enabled for this field. */
      inlineEditable?: boolean;
      /** @description The editor that is used to manage this field. */
      editor?: components["schemas"]["StringFieldEditor"];
      /** @description The masking type used for a masked field value. */
      mask?: string;
    });
    /** @enum {string} */
    StringFieldEditor: "Input" | "Markdown" | "Dropdown" | "Radio" | "RichText" | "Slug" | "TextArea" | "MaskedInput" | "Color" | "Html" | "StockPhoto";
    TagsFieldPropertiesDto: {
      fieldType: "TagsFieldPropertiesDto";
    } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType"> & ({
      /**
       * Format: int32 
       * @description The minimum allowed items for the field value.
       */
      minItems?: number | null;
      /**
       * Format: int32 
       * @description The maximum allowed items for the field value.
       */
      maxItems?: number | null;
      /** @description The allowed values for the field value. */
      allowedValues?: (string)[] | null;
      /** @description The editor that is used to manage this field. */
      editor?: components["schemas"]["TagsFieldEditor"];
    });
    /** @enum {string} */
    TagsFieldEditor: "Tags" | "Checkboxes" | "Dropdown";
    UIFieldPropertiesDto: {
      fieldType: "UIFieldPropertiesDto";
    } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType"> & {
      /** @description The editor that is used to manage this field. */
      editor?: components["schemas"]["UIFieldEditor"];
    };
    /** @enum {string} */
    UIFieldEditor: "Separator";
    NestedFieldDto: components["schemas"]["Resource"] & ({
      /**
       * Format: int64 
       * @description The id of the field.
       */
      fieldId?: number;
      /** @description The name of the field. Must be unique within the content type. */
      name: string;
      /** @description Defines if the field is hidden. */
      isHidden?: boolean;
      /** @description Defines if the field is locked. */
      isLocked?: boolean;
      /** @description Defines if the field is disabled. */
      isDisabled?: boolean;
      /** @description Defines if the field is encrypted. */
      isEncrypted?: boolean;
      /** @description The field properties. */
      properties: {
        fieldType: "NestedFieldDto";
      } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType">;
    });
    ContentTypeDto: components["schemas"]["Resource"] & ({
      /**
       * Format: guid 
       * @description The id of the content type.
       */
      id?: string;
      /** @description The name of the content type. Unique within the app. */
      name: string;
      /** @description The name of the section. */
      section?: string | null;
      /** @description The content type properties. */
      properties: components["schemas"]["ContentTypePropertiesDto"];
      /** @description Indicates if the content type is a singleton. */
      isSingleton?: boolean;
      /** @description Indicates if the content type is published. */
      isPublished?: boolean;
      /** @description The user that has created the content type. */
      createdBy: string;
      /** @description The user that has updated the content type. */
      lastModifiedBy: string;
      /**
       * Format: date-time 
       * @description The date and time when the content type has been created.
       */
      created?: string;
      /**
       * Format: date-time 
       * @description The date and time when the content type has been modified last.
       */
      lastModified?: string;
      /**
       * Format: int64 
       * @description The version of the content type.
       */
      version?: number;
      /** @description Indicates whether Content Type has encrypted fields. */
      hasEncryptedFields?: boolean;
    });
    ContentTypePropertiesDto: {
      /** @description Optional label for the editor. */
      label?: string | null;
      /** @description Hints to describe the content type. */
      hints?: string | null;
      /** @description Tags for automation processes. */
      tags?: (string)[] | null;
    };
    AddFieldDto: {
      /** @description The name of the field. Must be unique within the content type. */
      name: string;
      /** @description Determines the optional partitioning of the field. */
      partitioning?: string | null;
      /** @description The field properties. */
      properties: {
        fieldType: "AddFieldDto";
      } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType">;
    };
    ConfigureUIFieldsDto: {
      /** @description The name of fields that are used in content lists. */
      fieldsInLists?: (string)[] | null;
      /** @description The name of fields that are used in content references. */
      fieldsInReferences?: (string)[] | null;
    };
    ReorderFieldsDto: {
      /** @description The field ids in the target order. */
      fieldIds: (number)[];
    };
    UpdateFieldDto: {
      /** @description The field properties. */
      properties: {
        fieldType: "UpdateFieldDto";
      } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType">;
    };
    ErrorDto: {
      /** @description Error message. */
      message: string;
      /** @description The optional trace id. */
      traceId?: string | null;
      /** @description Link to the error details. */
      type?: string | null;
      /** @description Detailed error messages. */
      details?: (string)[] | null;
      /**
       * Format: int32 
       * @description Status code of the http response.
       */
      statusCode?: number | null;
    };
    ContentTypesDto: components["schemas"]["Resource"] & {
      /** @description The content types. */
      items?: (components["schemas"]["ContentTypeDto"])[];
    };
    CreateContentTypeDto: components["schemas"]["UpsertContentTypeDto"] & {
      /** @description The name of the content type. */
      name: string;
      /** @description Set to true to allow a single content item only. */
      isSingleton?: boolean;
    };
    UpsertContentTypeDto: {
      /** @description The optional properties. */
      properties?: components["schemas"]["ContentTypePropertiesDto"];
      /** @description The optional scripts. */
      scripts?: components["schemas"]["ContentTypeScriptsDto"];
      /** @description The names of the fields that should be used in references. */
      fieldsInReferences?: (string)[] | null;
      /** @description The names of the fields that should be shown in lists, including meta fields. */
      fieldsInLists?: (string)[] | null;
      /** @description Optional fields. */
      fields?: (components["schemas"]["UpsertContentTypeFieldDto"])[] | null;
      /** @description The optional preview urls. */
      previewUrls?: ({
        [key: string]: string | undefined;
      }) | null;
      /** @description The category. */
      category?: string | null;
      /** @description Set it to true to autopublish the content type. */
      isPublished?: boolean;
    };
    UpsertContentTypeFieldDto: {
      /** @description The name of the field. Must be unique within the content type. */
      name: string;
      /** @description Defines if the field is hidden. */
      isHidden?: boolean;
      /** @description Defines if the field is locked. */
      isLocked?: boolean;
      /** @description Defines if the field is disabled. */
      isDisabled?: boolean;
      /** @description Defines if the field is Encrypted. */
      isEncrypted?: boolean;
      /** @description Determines the optional partitioning of the field. */
      partitioning?: string | null;
      /** @description The field properties. */
      properties: {
        fieldType: "UpsertContentTypeFieldDto";
      } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType">;
      /** @description The nested fields. */
      nested?: (components["schemas"]["UpsertContentTypeNestedFieldDto"])[] | null;
    };
    UpsertContentTypeNestedFieldDto: {
      /** @description The name of the field. Must be unique within the content type. */
      name: string;
      /** @description Defines if the field is hidden. */
      isHidden?: boolean;
      /** @description Defines if the field is locked. */
      isLocked?: boolean;
      /** @description Defines if the field is disabled. */
      isDisabled?: boolean;
      /** @description Defines if the field is encrypted. */
      isEncrypted?: boolean;
      /** @description The field properties. */
      properties: {
        fieldType: "UpsertContentTypeNestedFieldDto";
      } & Omit<components["schemas"]["FieldPropertiesDto"], "fieldType">;
    };
    UpdateContentTypeDto: {
      /** @description Optional label for the editor. */
      label?: string | null;
      /** @description Hints to describe the content type. */
      hints?: string | null;
      /** @description Tags for automation processes. */
      tags?: (string)[] | null;
    };
    SynchronizeContentTypeDto: components["schemas"]["UpsertContentTypeDto"] & {
      /** @description True, when fields should not be deleted. */
      noFieldDeletion?: boolean;
      /** @description True, when fields with different types should not be recreated. */
      noFieldRecreation?: boolean;
    };
    ChangeCategoryDto: {
      /** @description The name of the category. */
      name?: string | null;
    };
    ConfigurePreviewUrlsDto: {
      [key: string]: string | undefined;
    };
    PermissionSetsDto: {
      /** @description List of Permission Sets. */
      items: (components["schemas"]["PermissionSetDto"])[];
      /**
       * Format: int64 
       * @description The total number of PermissionSets.
       */
      total?: number;
    };
    PermissionSetRequestDto: {
      /** @description The name of the Permission Set. */
      name: string;
    };
    /** @description Dto to Update Permission Set Group Permission. */
    UpdatePermissionSetGroupDto: {
      /**
       * Format: guid 
       * @description Group Id to Update.
       */
      groupId?: string;
      /** @description Group Role. */
      role?: string;
      /** @description Whether group has encryption access or not. */
      encryption?: boolean;
    };
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
      extensions?: {
        [key: string]: unknown | undefined;
      };
      [key: string]: (Record<string, unknown> | null) | undefined;
    };
    /** @description Dto to Update Permission Set Client Permission. */
    UpdatePermissionSetClientDto: {
      /** @description Client to Update. */
      name?: string;
      /** @description Client Role. */
      role?: string;
    };
    LanguageDto: {
      /** @description The iso code of the language. */
      iso2Code: string;
      /** @description The english name of the language. */
      englishName: string;
    };
    HistoryEventDto: {
      /** @description The message for the event. */
      message: string;
      /** @description The type of the original event. */
      eventType: string;
      /** @description The user who called the action. */
      actor: string;
      /**
       * Format: guid 
       * @description Gets a unique id for the event.
       */
      eventId?: string;
      /**
       * Format: date-time 
       * @description The time when the event happened.
       */
      created?: string;
      /**
       * Format: int64 
       * @description The version identifier.
       */
      version?: number;
    };
    GraphQLQuery: {
      operationName?: string;
      query?: string;
      variables?: Record<string, never>;
    };
    ContentsDto: components["schemas"]["Resource"] & {
      /**
       * Format: int64 
       * @description The total number of content items.
       */
      total?: number;
      /** @description The content items. */
      items: (components["schemas"]["ContentDto"])[];
      /** @description The possible statuses. */
      statuses: (components["schemas"]["StatusInfoDto"])[];
    };
    ContentDto: components["schemas"]["Resource"] & ({
      /**
       * Format: guid 
       * @description The id of the content item.
       */
      id?: string;
      /** @description The user that has created the content item. */
      createdBy: string;
      /** @description The user that has updated the content item. */
      lastModifiedBy: string;
      /** @description The data of the content item. */
      data: Record<string, never>;
      /** @description The reference data for the frontend UI. */
      referenceData?: components["schemas"]["NamedContentData"];
      /**
       * Format: date-time 
       * @description The date and time when the content item has been created.
       */
      created?: string;
      /**
       * Format: date-time 
       * @description The date and time when the content item has been modified last.
       */
      lastModified?: string;
      /** @description The status of the content. */
      status?: string;
      /** @description The new status of the content. */
      newStatus?: string | null;
      /** @description The color of the status. */
      statusColor?: string;
      /** @description The color of the new status. */
      newStatusColor?: string | null;
      /** @description The scheduled status. */
      scheduleJob?: components["schemas"]["ScheduleJobDto"];
      /** @description The name of the content type. */
      contentTypeName?: string | null;
      /** @description The display name of the content type. */
      contentTypeDisplayName?: string | null;
      /** @description The reference fields. */
      referenceFields?: (components["schemas"]["FieldDto"])[] | null;
      /**
       * Format: int64 
       * @description The version of the content.
       */
      version?: number;
      /** @description The scheduled status. */
      scheduleJobEnd?: components["schemas"]["ScheduleJobDto"];
      /** @description The NamedId of the content type, the content belongs to. */
      contentTypeId?: components["schemas"]["NamedIdOfGuid"];
      /** @description List of tags that have been deleted by the user. */
      tagsDeleted?: (string)[];
      /** @description List of tags for content. */
      tags?: (string)[];
      /** @description List of categories the content belongs to. */
      categories?: (components["schemas"]["Category"])[];
      /** @description List of categories the content belongs to. */
      permissionSet?: components["schemas"]["PermissionSetDto"];
      /** @description The highlight result string of a search. */
      highlight?: string;
      /** @description Notification details for the content. */
      notificationDetails?: components["schemas"]["NotificationDetails"];
      /** @description True if content type has an encrypted field. */
      isEncrypted?: boolean;
      /** @description Emails of additional users allowed to view data of a content type with encrypted field. */
      emailAddresses?: (string)[];
    });
    NamedContentData: components["schemas"]["ContentDataOfString"] & Record<string, never>;
    ContentDataOfString: ({
      [key: string]: components["schemas"]["ContentFieldData"] | undefined;
    }) & {
      ValidValues?: (components["schemas"]["KeyValuePair_2"])[];
    };
    KeyValuePair_2: {
      key?: string;
      value?: components["schemas"]["ContentFieldData"];
    };
    ContentFieldData: ({
      [key: string]: Record<string, never> | undefined;
    }) & {
      ContainsEncryptedPlaceholder?: boolean;
    };
    NamedIdOfGuid: {
      /** Format: guid */
      id?: string;
      name?: string;
    };
    Category: {
      /** Format: guid */
      id?: string;
      name?: string;
    };
    NotificationDetails: {
      notificationOption?: components["schemas"]["NotificationOption"];
      /** Format: int32 */
      daysInAdvance?: number | null;
      subject?: string;
      emailIntroduction?: string;
      smsMessage?: string | null;
      /** Format: date-time */
      sendAt?: string | null;
      eventType?: string;
    };
    /** @enum {string} */
    NotificationOption: "None" | "OnPublishDate" | "DaysInAdvance";
    StatusInfoDto: {
      /** @description The name of the status. */
      status: string;
      /** @description The color of the status. */
      color: string;
    };
    ContentsIdsQueryDto: {
      /** @description The list of ids to query. */
      ids: (string)[];
    };
    QueryDto: {
      /** @description The optional list of ids to query. */
      ids?: (string)[] | null;
      /** @description The optional odata query. */
      oData?: string | null;
      /** @description The optional json query. */
      q?: Record<string, unknown> | null;
      /**
       * Format: guid 
       * @description The parent id (for assets).
       */
      parentId?: string | null;
    };
    NamedContentDataDto: {
      data?: components["schemas"]["NamedContentData"];
      categories?: (components["schemas"]["Category"])[];
      permissionSet?: components["schemas"]["PermissionSet"];
      tags?: (string)[];
      tagsDeleted?: (string)[];
      notificationDetails?: components["schemas"]["NotificationDetails"];
      emailAddresses?: (string)[] | null;
    };
    PermissionSet: {
      /** Format: guid */
      id?: string;
      name?: string;
    };
    BulkResultDto: {
      /** @description The error when the import failed. */
      error?: components["schemas"]["ErrorDto"];
      /**
       * Format: guid 
       * @description The id of the content when the import succeeds.
       */
      contentId?: string | null;
    };
    BulkUpdateDto: {
      /** @description The contents to update or insert. */
      jobs: (components["schemas"]["BulkUpdateJobDto"])[];
      /** @description True to automatically publish the content. */
      publish?: boolean;
      /** @description True to turn off scripting for faster inserts. Default: true. */
      doNotScript?: boolean;
      /** @description True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true. */
      optimizeValidation?: boolean;
    };
    BulkUpdateJobDto: {
      /** @description An optional query to identify the content to update. */
      query?: components["schemas"]["QueryOfIJsonValue"];
      /**
       * Format: guid 
       * @description An optional id of the content to update.
       */
      id?: string | null;
      /** @description The data of the content when type is set to 'Upsert'. */
      data?: components["schemas"]["NamedContentData"];
      /** @description The new status when the type is set to 'ChangeStatus'. */
      status?: string | null;
      /** @description The update type. */
      type?: components["schemas"]["BulkUpdateType"];
      /** @description The Permission Set for content item */
      permissionSet?: components["schemas"]["PermissionSet"];
      /** @description Categories for content item. */
      categories?: (components["schemas"]["Category"])[];
      /** @description Tags for content item */
      tags?: (string)[];
      /** @description Details to send notifications for item. */
      notificationDetails?: components["schemas"]["NotificationDetails"];
    };
    QueryOfIJsonValue: {
      filter?: components["schemas"]["FilterNodeOfIJsonValue"];
      fullText?: string | null;
      /** Format: int64 */
      skip?: number;
      /** Format: int64 */
      take?: number;
      /** Format: int64 */
      top?: number;
      sort?: (components["schemas"]["SortNode"])[];
      user?: components["schemas"]["ClaimsPrincipal"];
    };
    FilterNodeOfIJsonValue: Record<string, never>;
    SortNode: {
      path?: components["schemas"]["PropertyPath"];
      order?: components["schemas"]["SortOrder"];
    };
    PropertyPath: (string)[];
    /** @enum {string} */
    SortOrder: "Ascending" | "Descending";
    ClaimsPrincipal: {
      claims?: (components["schemas"]["Claim"])[];
      identities?: (components["schemas"]["ClaimsIdentity"])[];
      identity?: components["schemas"]["IIdentity"];
    };
    Claim: {
      issuer?: string;
      originalIssuer?: string;
      properties?: {
        [key: string]: string | undefined;
      };
      subject?: components["schemas"]["ClaimsIdentity"];
      type?: string;
      value?: string;
      valueType?: string;
    };
    ClaimsIdentity: {
      authenticationType?: string | null;
      isAuthenticated?: boolean;
      actor?: components["schemas"]["ClaimsIdentity"];
      bootstrapContext?: Record<string, unknown> | null;
      claims?: (components["schemas"]["Claim"])[];
      label?: string | null;
      name?: string | null;
      nameClaimType?: string;
      roleClaimType?: string;
    };
    IIdentity: {
      authenticationType?: string | null;
      isAuthenticated?: boolean;
      name?: string | null;
    };
    /** @enum {string} */
    BulkUpdateType: "Upsert" | "ChangeStatus" | "Delete";
    ChangeStatusDto: {
      /** @description The new status. */
      status: string;
      /**
       * Format: date-time 
       * @description The due time.
       */
      dueTime?: string | null;
      notificationDetails?: components["schemas"]["NotificationDetails"];
    };
    CategoriesDto: {
      /** @description The categories. */
      items: (components["schemas"]["CategoryDto"])[];
      /**
       * Format: int64 
       * @description The total number of categories.
       */
      total?: number;
    };
    CategoryDto: {
      /**
       * Format: guid 
       * @description The id of the category.
       */
      id: string;
      /** @description The name of the category. */
      name: string;
      /**
       * Format: int64 
       * @description The version of the category.
       */
      version?: number;
      /**
       * Format: date-time 
       * @description When the Category was last modified.
       */
      lastModified?: string;
      /** @description Who last modified the Category. */
      lastModifiedBy?: string;
    };
    CategoryRequestDto: {
      /** @description The name of the category. */
      name: string;
    };
    BackupJobsDto: components["schemas"]["Resource"] & {
      /** @description The backups. */
      items: (components["schemas"]["BackupJobDto"])[];
    };
    BackupJobDto: components["schemas"]["Resource"] & ({
      /**
       * Format: guid 
       * @description The id of the backup job.
       */
      id?: string;
      /**
       * Format: date-time 
       * @description The time when the job has been started.
       */
      started?: string;
      /**
       * Format: date-time 
       * @description The time when the job has been stopped.
       */
      stopped?: string | null;
      /**
       * Format: int32 
       * @description The number of handled events.
       */
      handledEvents?: number;
      /**
       * Format: int32 
       * @description The number of handled assets.
       */
      handledAssets?: number;
      /** @description The status of the operation. */
      status?: components["schemas"]["JobStatus"];
    });
    /** @enum {string} */
    JobStatus: "Created" | "Started" | "Completed" | "Failed";
    RestoreJobDto: {
      /**
       * Format: uri 
       * @description The uri to load from.
       */
      url: string;
      /** @description The status log. */
      log: (string)[];
      /**
       * Format: date-time 
       * @description The time when the job has been started.
       */
      started?: string;
      /**
       * Format: date-time 
       * @description The time when the job has been stopped.
       */
      stopped?: string | null;
      /** @description The status of the operation. */
      status?: components["schemas"]["JobStatus"];
    };
    RestoreRequestDto: {
      /** @description The name of the app. */
      name?: string;
      /**
       * Format: uri 
       * @description The url to the restore file.
       */
      url: string;
    };
    /** @enum {string} */
    ResizeMode: "Crop" | "CropUpsize" | "Pad" | "BoxPad" | "Max" | "Min" | "Stretch";
    /** @enum {string} */
    SearchScope: "All" | "Published";
    AssetsDto: components["schemas"]["Resource"] & {
      /**
       * Format: int64 
       * @description The total number of assets.
       */
      total?: number;
      /** @description The assets. */
      items: (components["schemas"]["AssetDto"])[];
      /** @description The possible statuses. */
      statuses: (components["schemas"]["StatusInfoDto"])[];
    };
    AssetDto: components["schemas"]["Resource"] & ({
      /**
       * Format: guid 
       * @description The id of the asset.
       */
      id?: string;
      /**
       * Format: guid 
       * @description The id of the parent folder. Empty for files without parent.
       */
      parentId?: string;
      /** @description The file name. */
      fileName: string;
      /** @description The file hash. */
      fileHash?: string | null;
      /** @description True, when the asset is not public. */
      isProtected?: boolean;
      /** @description The slug. */
      slug: string;
      /** @description The mime type. */
      mimeType: string;
      /** @description The file type. */
      fileType: string;
      /** @description The file type. */
      fileExtension: string;
      /** @description The formatted text representation of the metadata. */
      metadataText: string;
      /** @description The asset metadata. */
      metadata: {
        [key: string]: Record<string, never> | undefined;
      };
      /** @description The asset tags. */
      tags: (string)[];
      /**
       * Format: int64 
       * @description The size of the file in bytes.
       */
      fileSize?: number;
      /**
       * Format: int64 
       * @description The version of the file.
       */
      fileVersion?: number;
      /** @description The type of the asset. */
      assetType?: components["schemas"]["AssetType"];
      /** @description The user that has created the asset. */
      createdBy: string;
      /** @description The user that has updated the asset. */
      lastModifiedBy: string;
      /**
       * Format: date-time 
       * @description The date and time when the asset has been created.
       */
      created?: string;
      /**
       * Format: date-time 
       * @description The date and time when the asset has been modified last.
       */
      lastModified?: string;
      /**
       * Format: int64 
       * @description The version of the asset.
       */
      version?: number;
      /** @description The metadata. */
      _meta?: components["schemas"]["AssetMeta"];
      /**
       * @deprecated 
       * @description Determines of the created file is an image.
       */
      isImage?: boolean;
      /**
       * Format: int32 
       * @deprecated 
       * @description The width of the image in pixels if the asset is an image.
       */
      pixelWidth?: number | null;
      /**
       * Format: int32 
       * @deprecated 
       * @description The height of the image in pixels if the asset is an image.
       */
      pixelHeight?: number | null;
      /** @description The new status of the content. */
      newStatus?: string | null;
      /** @description The color of the status. */
      statusColor?: string;
      /** @description The color of the new status. */
      newStatusColor?: string | null;
      /** @description The brief description of the asset, usually used for Alt Text for screen readers. Should be kept below 125 characters. */
      briefDescription?: string;
      /** @description The status of the asset. */
      status?: string;
      /** @description The categories associated with this asset. */
      categories?: (components["schemas"]["Category"])[];
      /** @description The highlight result string of a search. */
      highlight?: string;
      /** @description The scheduled status. */
      scheduleJob?: components["schemas"]["ScheduleJobDto"];
      /** @description The transcript of the audio asset. */
      transcript?: string;
      /** @description Indicates if the draft asset is pending. */
      isPending?: boolean;
      /** @description The permission set associated with this asset. */
      permissionSet?: components["schemas"]["PermissionSetDto"];
      /** @description The notification details for this asset. */
      notificationDetails?: components["schemas"]["NotificationDetails"];
      /** @description True if file is an encrypted asset. */
      isEncrypted?: boolean;
      /** @description Emails of additional users allowed to view an encrypted asset. */
      emailAddresses?: (string)[];
    });
    /** @enum {string} */
    AssetType: "Unknown" | "Image" | "Audio" | "Video";
    AssetMeta: {
      /** @description Indicates whether the asset is a duplicate. */
      isDuplicate?: string;
    };
    AnnotateAssetDto: {
      /** @description The new name of the asset. */
      fileName?: string | null;
      /** @description The new slug of the asset. */
      slug?: string | null;
      /** @description True, when the asset is not public. */
      isProtected?: boolean | null;
      /** @description The new asset tags. */
      tags?: (string)[] | null;
      /** @description The asset metadata. */
      metadata?: ({
        [key: string]: Record<string, never> | undefined;
      }) | null;
      categories?: (components["schemas"]["Category"])[];
      permissionSet?: components["schemas"]["PermissionSet"];
      /** @description Updated list of email addresses that can access the encrypted asset. */
      emailAddresses?: (string)[];
    };
    ChangeAssetStatusDto: {
      /** @description The new status. */
      status: string;
      /**
       * Format: date-time 
       * @description The due time.
       */
      dueTime?: string | null;
      /** @description Send Notification Details when publishing asset. */
      notificationDetails?: components["schemas"]["NotificationDetails"];
    };
    AssetSuggestionResults: {
      description?: string;
      tags?: (string)[];
      transcript?: string;
    };
    ClientsDto: components["schemas"]["Resource"] & {
      /** @description The clients. */
      items: (components["schemas"]["ClientDto"])[];
    };
    ClientDto: components["schemas"]["Resource"] & ({
      /** @description The client id. */
      id: string;
      /** @description The client secret. */
      secret: string;
      /** @description The client name. */
      name: string;
      /** @description The role of the client. */
      role?: string | null;
    });
    CreateClientDto: {
      /** @description The id of the client. */
      id: string;
    };
    UpdateClientDto: {
      /** @description The new display name of the client. */
      name?: string;
      /** @description The role of the client. */
      role?: string | null;
    };
    ContributorsDto: components["schemas"]["Resource"] & {
      /** @description The contributors. */
      items: (components["schemas"]["ContributorDto"])[];
      /**
       * Format: int32 
       * @description The maximum number of allowed contributors.
       */
      maxContributors?: number;
      /** @description The metadata to provide information about this request. */
      _meta?: components["schemas"]["ContributorsMetadata"];
    };
    ContributorDto: components["schemas"]["Resource"] & ({
      /** @description The id of the user that contributes to the app. */
      contributorId: string;
      /** @description The display name. */
      contributorName: string;
      /** @description The email address. */
      contributorEmail: string;
      /** @description The role of the contributor. */
      role?: string | null;
    });
    ContributorsMetadata: {
      /** @description Indicates whether the user has been invited. */
      isInvited?: string;
    };
    AssignContributorDto: {
      /** @description The id or email of the user to add to the app. */
      contributorId: string;
      /** @description The role of the contributor. */
      role?: string | null;
      /** @description Set to true to invite the user if he does not exist. */
      invite?: boolean;
    };
    AppLanguagesDto: components["schemas"]["Resource"] & {
      /** @description The languages. */
      items: (components["schemas"]["AppLanguageDto"])[];
    };
    AppLanguageDto: components["schemas"]["Resource"] & {
      /** @description The iso code of the language. */
      iso2Code: string;
      /** @description The english name of the language. */
      englishName: string;
      /** @description The fallback languages. */
      fallback: (string)[];
      /** @description Indicates if the language is the master language. */
      isMaster?: boolean;
      /** @description Indicates if the language is optional. */
      isOptional?: boolean;
    };
    AddLanguageDto: {
      /** @description The language to add. */
      language: string;
    };
    UpdateLanguageDto: {
      /** @description Set the value to true to make the language the master. */
      isMaster?: boolean | null;
      /** @description Set the value to true to make the language optional. */
      isOptional?: boolean;
      /** @description Optional fallback languages. */
      fallback?: (string)[] | null;
    };
    PatternsDto: components["schemas"]["Resource"] & {
      /** @description The patterns. */
      items: (components["schemas"]["PatternDto"])[];
    };
    PatternDto: components["schemas"]["Resource"] & ({
      /**
       * Format: guid 
       * @description Unique id of the pattern.
       */
      id?: string;
      /** @description The name of the suggestion. */
      name: string;
      /** @description The regex pattern. */
      pattern: string;
      /** @description The regex message. */
      message?: string | null;
    });
    UpdatePatternDto: {
      /** @description The name of the suggestion. */
      name: string;
      /** @description The regex pattern. */
      pattern: string;
      /** @description The regex message. */
      message?: string | null;
    };
    RolesDto: components["schemas"]["Resource"] & {
      /** @description The roles. */
      items: (components["schemas"]["RoleDto"])[];
    };
    RoleDto: components["schemas"]["Resource"] & {
      /** @description The role name. */
      name: string;
      /**
       * Format: int32 
       * @description The number of clients with this role.
       */
      numClients?: number;
      /**
       * Format: int32 
       * @description The number of contributors with this role.
       */
      numContributors?: number;
      /** @description Indicates if the role is an builtin default role. */
      isDefaultRole?: boolean;
      /** @description Associated list of permissions. */
      permissions: (string)[];
    };
    AddRoleDto: {
      /** @description The role name. */
      name: string;
    };
    UpdateRoleDto: {
      /** @description Associated list of permissions. */
      permissions: (string)[];
    };
    AppDto: components["schemas"]["Resource"] & ({
      /** @description The name of the app. */
      name: string;
      /** @description The optional label of the app. */
      label?: string | null;
      /** @description The optional description of the app. */
      description?: string | null;
      /**
       * Format: int64 
       * @description The version of the app.
       */
      version?: number;
      /**
       * Format: guid 
       * @description The id of the app.
       */
      id?: string;
      /**
       * Format: date-time 
       * @description The timestamp when the app has been created.
       */
      created?: string;
      /**
       * Format: date-time 
       * @description The timestamp when the app has been modified last.
       */
      lastModified?: string;
      /** @description The permission level of the user. */
      permissions?: (string)[];
      /** @description Indicates if the user can access the api. */
      canAccessApi?: boolean;
      /** @description Indicates if the user can access at least one content. */
      canAccessContent?: boolean;
      /** @description Gets the current plan name. */
      planName?: string | null;
      /** @description Gets the next plan name. */
      planUpgrade?: string | null;
      /** @description Indicates superuser or not. */
      isSuperUser?: boolean;
      /** @description If true, encryption will be enabled and an encryption key will be generated. */
      allowEncryption?: boolean;
      /** @description Turn On/Off the auto tagging feature when uploading Assets. */
      bypassAutoTagging?: boolean;
      /** @description Indicates the app's default role. */
      defaultRole?: string;
      /** @description Indicates if the user can access the settings tab. */
      canAccessSettings?: boolean;
      /** @description CivicPlus Platform Organization. */
      organization?: components["schemas"]["NamedIdOfGuid"];
    });
    CreateAppDto: {
      /** @description The name of the app. */
      name: string;
      /** @description Initialize the app with the inbuilt template. */
      template?: string | null;
      /** @description CivicPlus Platform Organization. */
      organization?: components["schemas"]["NamedIdOfGuid"];
    };
    UpdateAppDto: {
      /** @description The optional label of your app. */
      label?: string | null;
      /** @description The optional description of your app. */
      description?: string | null;
      /** @description CivicPlus Platform Organization. */
      organization?: components["schemas"]["NamedIdOfGuid"];
      /** @description This role will be set as a default for new groups. */
      defaultRole?: string;
      /** @description If true, encryption will be enabled and an encryption key will be generated. */
      allowEncryption?: boolean;
      /** @description Turn On/Off the auto tagging feature when uploading Assets. */
      bypassAutoTagging?: boolean;
    };
    WorkflowsDto: components["schemas"]["Resource"] & {
      /** @description The workflow. */
      items: (components["schemas"]["WorkflowDto"])[];
      /** @description The errros that should be fixed. */
      errors: (string)[];
    };
    WorkflowDto: components["schemas"]["Resource"] & ({
      /**
       * Format: guid 
       * @description The workflow id.
       */
      id?: string;
      /** @description The name of the workflow. */
      name?: string | null;
      /** @description The workflow steps. */
      steps: {
        [key: string]: components["schemas"]["WorkflowStepDto"] | undefined;
      };
      /** @description The content type ids. */
      contentTypeIds?: (string)[] | null;
      /** @description The initial step. */
      initial?: string;
      /** @description If the workflow covers content or files. */
      type?: components["schemas"]["WorkflowType"];
    });
    WorkflowStepDto: {
      /** @description The transitions. */
      transitions: {
        [key: string]: components["schemas"]["WorkflowTransitionDto"] | undefined;
      };
      /** @description The optional color. */
      color?: string | null;
      /** @description Indicates if updates should not be allowed. */
      noUpdate?: boolean;
      /** @description Optional expression that must evaluate to true when you want to prevent updates. */
      noUpdateExpression?: string | null;
      /** @description Optional list of roles to restrict the updates for users with these roles. */
      noUpdateRoles?: (string)[] | null;
    };
    WorkflowTransitionDto: {
      /** @description The optional expression. */
      expression?: string | null;
      /** @description The optional restricted role. */
      roles?: (string)[] | null;
    };
    /** @enum {string} */
    WorkflowType: "Content" | "Files";
    AddWorkflowDto: {
      /** @description The name of the workflow. */
      name: string;
      type?: components["schemas"]["WorkflowType"];
    };
    UpdateWorkflowDto: {
      /** @description The name of the workflow. */
      name?: string | null;
      /** @description The workflow steps. */
      steps: {
        [key: string]: components["schemas"]["WorkflowStepDto"] | undefined;
      };
      /** @description The content type ids. */
      contentTypeIds?: (string)[] | null;
      /** @description The initial step. */
      initial: string;
      type: components["schemas"]["WorkflowType"];
    };
    AppGroupDto: {
      /**
       * Format: guid 
       * @description The id of the group that contributes to the app.
       */
      groupId: string;
      /** @description The name of the group that contributes to the app. */
      name: string;
      /** @description The permission level as a contributor. */
      role?: string;
      /** @description The members of a group added on CPP. */
      membersAdded?: (components["schemas"]["GroupMembership"])[];
      /** @description The members of a group removed on CPP. */
      membersRemoved?: (components["schemas"]["GroupMembership"])[];
      /** @description The parent groups of a group removed on CPP. */
      parentGroupsAdded?: (components["schemas"]["GroupMembership"])[];
      /** @description The parent groups of a group removed on CPP. */
      parentGroupsRemoved?: (components["schemas"]["GroupMembership"])[];
      /** Format: int64 */
      membershipsCount?: number;
    };
    GroupMembership: {
      /** Format: guid */
      id?: string;
      email?: string;
      name?: string;
      isGroup?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  Users_GetUserResources: {
    /** Get the user resources. */
    responses: {
      /** @description User resources returned. */
      200: {
        content: {
          "application/json": components["schemas"]["ResourcesDto"];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Users_GetUsers: {
    /**
     * Get users by query. 
     * @description Search the user by query that contains the email address or the part of the email address.
     */
    parameters?: {
        /** @description The query to search the user by email address. Case invariant. */
      query?: {
        query?: string | null;
      };
    };
    responses: {
      /** @description Users returned. */
      200: {
        content: {
          "application/json": (components["schemas"]["UserDto"])[];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Users_GetUser: {
    /** Get user by id. */
    parameters: {
        /** @description The id of the user (GUID). */
      path: {
        id: string;
      };
    };
    responses: {
      /** @description User found. */
      200: {
        content: {
          "application/json": components["schemas"]["UserDto"];
        };
      };
      /** @description User not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Users_GetUserPicture: {
    /** Get user picture by id. */
    parameters: {
        /** @description The id of the user (GUID). */
      path: {
        id: string;
      };
    };
    responses: {
      /** @description User found and image or fallback returned. */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description User not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  UI_GetSettings: {
    /** Get ui settings. */
    responses: {
      /** @description UI settings returned. */
      200: {
        content: {
          "application/json": components["schemas"]["UISettingsDto"];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  UI_GetAppSettings: {
    /** Get ui settings for a specific app. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description UI settings returned. */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  UI_GetUserSettings: {
    /** Get my ui settings. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description UI settings returned. */
      200: {
        content: {
          "application/json": {
            [key: string]: string | undefined;
          };
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  UI_PutSetting: {
    /** Set ui settings. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the setting. */
      path: {
        app: string;
        key: string;
      };
    };
    /** @description The request with the value to update. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSettingDto"];
      };
    };
    responses: {
      /** @description UI setting set. */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  UI_DeleteSetting: {
    /** Remove ui settings. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the setting. */
      path: {
        app: string;
        key: string;
      };
    };
    responses: {
      /** @description UI setting removed. */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  UI_PutUserSetting: {
    /** Set my ui settings. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the setting. */
      path: {
        app: string;
        key: string;
      };
    };
    /** @description The request with the value to update. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSettingDto"];
      };
    };
    responses: {
      /** @description UI setting set. */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  UI_DeleteUserSetting: {
    /** Remove my ui settings. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the setting. */
      path: {
        app: string;
        key: string;
      };
    };
    responses: {
      /** @description UI setting removed. */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Translations_GetLanguages: {
    /** Translate a text. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description The translation request. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TranslateDto"];
      };
    };
    responses: {
      /** @description Text translated. */
      200: {
        content: {
          "application/json": components["schemas"]["TranslationDto"];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Tags_GetTags: {
    /** Get tags for app. */
    parameters: {
        /** @description Number of tags to skip. */
        /** @description Number of tags to return. */
        /** @description Search term to filter tags by. */
      query?: {
        skip?: number;
        take?: number;
        search?: string | null;
      };
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Tags returned. */
      200: {
        content: {
          "application/json": components["schemas"]["TagsDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Tags_GetTag: {
    /** Get tag by id. */
    parameters: {
        /** @description The name of the app. */
        /** @description Tag id to retrieve. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Tag returned. */
      200: {
        content: {
          "application/json": components["schemas"]["TagDto"];
        };
      };
      /** @description App or Tag not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Tags_UpdateTag: {
    /**
     * Update tag by id. 
     * @description Setting Display Name to existing tag name will merge the two tags together.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description Tag id to update. */
      path: {
        app: string;
        id: string;
      };
    };
    /** @description Tag update info. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTagDto"];
      };
    };
    responses: {
      /** @description No Content. */
      204: never;
      /** @description Invalid display name. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description App or Tag not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Tags_DeleteTag: {
    /** Delete tag by id. */
    parameters: {
        /** @description The name of the app. */
        /** @description Tag id to delete. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description No Content. */
      204: never;
      /** @description App or Tag not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Usages_GetLog: {
    /** Get api calls as log file. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Usage tracking results returned. */
      200: {
        content: {
          "application/json": components["schemas"]["LogDownloadDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Usages_GetUsages: {
    /** Get api calls in date range. */
    parameters: {
        /** @description The name of the app. */
        /** @description The from date. */
        /** @description The to date. */
      path: {
        app: string;
        fromDate: string;
        toDate: string;
      };
    };
    responses: {
      /** @description API call returned. */
      200: {
        content: {
          "application/json": components["schemas"]["CallsUsageDtoDto"];
        };
      };
      /** @description Range between from date and to date is not valid or has more than 100 days. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Usages_GetCurrentStorageSize: {
    /** Get total asset size. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Storage usage returned. */
      200: {
        content: {
          "application/json": components["schemas"]["CurrentStorageDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Usages_GetStorageSizes: {
    /** Get asset usage by date. */
    parameters: {
        /** @description The name of the app. */
        /** @description The from date. */
        /** @description The to date. */
      path: {
        app: string;
        fromDate: string;
        toDate: string;
      };
    };
    responses: {
      /** @description Storage usage returned. */
      200: {
        content: {
          "application/json": (components["schemas"]["StorageUsagePerDateDto"])[];
        };
      };
      /** @description Range between from date and to date is not valid or has more than 100 days. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Search_GetSchemas: {
    /** Get search results. */
    parameters: {
        /** @description The search query. */
      query?: {
        query?: string | null;
      };
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Search results returned. */
      200: {
        content: {
          "application/json": (components["schemas"]["SearchResultDto"])[];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Search_GetAllContentAndAssets: {
    /**
     * Get Content and Assets. 
     * @description Get all assets and content for the app.
     */
    parameters: {
        /** @description Whether to include PermissionSet permissions with items. */
        /** @description Optional OData full text search. */
        /** @description Optional number of items to take. */
        /** @description Optional number of items to skip. */
        /** @description Optional OData order definition. */
        /** @description Optional OData filter definition. */
      query?: {
        q?: string | null;
        includePermissions?: boolean;
        $search?: string;
        $top?: number;
        $skip?: number;
        $orderby?: string;
        $filter?: string;
      };
        /** @description The name of the app to get the contents for. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Assets and Content returned. If only searching on an asset or content specific value, */
      200: {
        content: {
          "application/json": components["schemas"]["AllAssetsDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_PostField: {
    /** Add a content type field. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
      path: {
        app: string;
        name: string;
      };
    };
    /** @description The field object that needs to be added to the content type. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddFieldDto"];
      };
    };
    responses: {
      /** @description Content Type field created. */
      201: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type field properties not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Content Type field name already in use. */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_PostNestedField: {
    /** Add a nested field. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The parent field id. */
      path: {
        app: string;
        name: string;
        parentId: number;
      };
    };
    /** @description The field object that needs to be added to the content type. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddFieldDto"];
      };
    };
    responses: {
      /** @description Content Type field created. */
      201: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type field properties not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content Type, field or app not found. */
      404: never;
      /** @description Content Type field name already in use. */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_PutContentTypeUIFields: {
    /** Configure UI fields. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
      path: {
        app: string;
        name: string;
      };
    };
    /** @description The request that contains the field names. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfigureUIFieldsDto"];
      };
    };
    responses: {
      /** @description Content Type UI fields defined. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type field contains invalid field names. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_PutContentTypeFieldOrdering: {
    /** Reorders the fields. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
      path: {
        app: string;
        name: string;
      };
    };
    /** @description The request that contains the field ids. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReorderFieldsDto"];
      };
    };
    responses: {
      /** @description Content Type fields reordered. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type field ids do not cover the fields of the content type. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_PutNestedFieldOrdering: {
    /** Reorders the nested fields. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The parent field id. */
      path: {
        app: string;
        name: string;
        parentId: number;
      };
    };
    /** @description The request that contains the field ids. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReorderFieldsDto"];
      };
    };
    responses: {
      /** @description Content Type fields reordered. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type field ids do not cover the fields of the content type. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content Type, field or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_PutField: {
    /** Update a content type field. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the field to update. */
      path: {
        app: string;
        name: string;
        id: number;
      };
    };
    /** @description The field object that needs to be added to the content type. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateFieldDto"];
      };
    };
    responses: {
      /** @description Content Type field updated. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type field properties not valid or field is locked. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content Type, field or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_DeleteField: {
    /** Delete a content type field. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the field to disable. */
      path: {
        app: string;
        name: string;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field deleted. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Field is locked. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content Type, field or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_PutNestedField: {
    /** Update a nested field. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The parent field id. */
        /** @description The id of the field to update. */
      path: {
        app: string;
        name: string;
        parentId: number;
        id: number;
      };
    };
    /** @description The field object that needs to be added to the content type. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateFieldDto"];
      };
    };
    responses: {
      /** @description Content Type field updated. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type field properties not valid or field is locked. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content Type, field or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_DeleteNestedField: {
    /** Delete a nested field. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The parent field id. */
        /** @description The id of the field to disable. */
      path: {
        app: string;
        name: string;
        parentId: number;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field deleted. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Field is locked. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content Type, field or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_LockField: {
    /**
     * Lock a content type field. 
     * @description A locked field cannot be updated or deleted.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the field to lock. */
      path: {
        app: string;
        name: string;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field locked. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type, field or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_LockNestedField: {
    /**
     * Lock a nested field. 
     * @description A locked field cannot be edited or deleted.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The parent field id. */
        /** @description The id of the field to lock. */
      path: {
        app: string;
        name: string;
        parentId: number;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field locked. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Field, content type, or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_HideField: {
    /**
     * Hide a content type field. 
     * @description A hidden field is not part of the API response, but can still be edited in the portal.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the field to hide. */
      path: {
        app: string;
        name: string;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field hidden. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type, field or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_HideNestedField: {
    /**
     * Hide a nested field. 
     * @description A hidden field is not part of the API response, but can still be edited in the portal.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The parent field id. */
        /** @description The id of the field to hide. */
      path: {
        app: string;
        name: string;
        parentId: number;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field hidden. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Field, content type, or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_ShowField: {
    /**
     * Show a content type field. 
     * @description A hidden field is not part of the API response, but can still be edited in the portal.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the field to show. */
      path: {
        app: string;
        name: string;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field shown. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type, field or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_ShowNestedField: {
    /**
     * Show a nested field. 
     * @description A hidden field is not part of the API response, but can still be edited in the portal.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The parent field id. */
        /** @description The id of the field to show. */
      path: {
        app: string;
        name: string;
        parentId: number;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field shown. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type, field or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_EnableField: {
    /**
     * Enable a content type field. 
     * @description A disabled field cannot not be edited in the CivicPlus portal anymore, but will be part of the API response.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the field to enable. */
      path: {
        app: string;
        name: string;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field enabled. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type, field or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_EnableNestedField: {
    /**
     * Enable a nested field. 
     * @description A disabled field cannot not be edited in the CivicPlus portal anymore, but will be part of the API response.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The parent field id. */
        /** @description The id of the field to enable. */
      path: {
        app: string;
        name: string;
        parentId: number;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field enabled. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type, field or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_DisableField: {
    /**
     * Disable a content type field. 
     * @description A disabled field cannot not be edited in the CivicPlus portal anymore, but will be part of the API response.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the field to disable. */
      path: {
        app: string;
        name: string;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field disabled. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type, field or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_DisableNestedField: {
    /**
     * Disable a nested field. 
     * @description A disabled field cannot not be edited in the CivicPlus portal anymore, but will be part of the API response.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The parent field id. */
        /** @description The id of the field to disable. */
      path: {
        app: string;
        name: string;
        parentId: number;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field disabled. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type, field or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_UnlockField: {
    /**
     * Unlock a Content Type field. 
     * @description An unlocked field can be edited in the CivicPlus portal.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the Content Type. */
        /** @description The id of the field to unlock. */
      path: {
        app: string;
        name: string;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field unlocked. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type field already unlocked. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content Type, field, or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_UnlockNestedField: {
    /**
     * Unlock a Nested Content Type field. 
     * @description An unlocked field can be edited in the CivicPlus portal.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the Content Type. */
        /** @description The parent field id. */
        /** @description The id of the field to unlock. */
      path: {
        app: string;
        name: string;
        parentId: number;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field unlocked. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type field already unlocked. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content Type, field, or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_EncryptField: {
    /**
     * Encrypt a field. 
     * @description Only string fields can be encrypted and an encrypted field cannot be null.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the field to encrypt. */
      path: {
        app: string;
        name: string;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field encrypted. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Field, content type, or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypeFields_EncryptNestedField: {
    /**
     * Encrypt a nested field. 
     * @description Only string fields can be encrypted and an encrypted field cannot be null.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The parent field id. */
        /** @description The id of the field to encrypt. */
      path: {
        app: string;
        name: string;
        parentId: number;
        id: number;
      };
    };
    responses: {
      /** @description Content Type field encrypted. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Field, content type, or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypes_GetContentTypes: {
    /** Get content types. */
    parameters: {
        /** @description True: include content-type details (i.e. field details). */
      query?: {
        includeDetails?: boolean;
      };
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Content Types returned. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypesDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypes_PostContentType: {
    /** Create a new content type. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description The content type object that needs to be added to the app. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateContentTypeDto"];
      };
    };
    responses: {
      /** @description Content Type created. */
      201: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type name or properties are not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content Type name already in use. */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypes_GetContentType: {
    /** Get a content type by name. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type to retrieve. */
      path: {
        app: string;
        name: string;
      };
    };
    responses: {
      /** @description Content Type found. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypes_PutContentType: {
    /** Update a content type. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
      path: {
        app: string;
        name: string;
      };
    };
    /** @description The content type object that needs to updated. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateContentTypeDto"];
      };
    };
    responses: {
      /** @description Content Type updated. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type properties are not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypes_DeleteContentType: {
    /** Delete a content type. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type to delete. */
      path: {
        app: string;
        name: string;
      };
    };
    responses: {
      /** @description Content Type deleted. */
      204: never;
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypes_PutContentTypeSync: {
    /** Synchronize a content type. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
      path: {
        app: string;
        name: string;
      };
    };
    /** @description The content type object that needs to updated. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SynchronizeContentTypeDto"];
      };
    };
    responses: {
      /** @description Content Type updated. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type properties are not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypes_PutCategory: {
    /** Update a content type section. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
      path: {
        app: string;
        name: string;
      };
    };
    /** @description The content type object that needs to updated. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangeCategoryDto"];
      };
    };
    responses: {
      /** @description Content Type updated. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypes_PutPreviewUrls: {
    /** Update the preview urls. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
      path: {
        app: string;
        name: string;
      };
    };
    /** @description The preview urls for the content type. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfigurePreviewUrlsDto"];
      };
    };
    responses: {
      /** @description Content Type updated. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypes_PutScripts: {
    /** Update the scripts. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
      path: {
        app: string;
        name: string;
      };
    };
    /** @description The content type scripts object that needs to updated. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContentTypeScriptsDto"];
      };
    };
    responses: {
      /** @description Content Type updated. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type properties are not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypes_PublishContentType: {
    /** Publish a content type. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type to publish. */
      path: {
        app: string;
        name: string;
      };
    };
    responses: {
      /** @description Content Type has been published. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  ContentTypes_UnpublishContentType: {
    /** Unpublish a content type. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type to unpublish. */
      path: {
        app: string;
        name: string;
      };
    };
    responses: {
      /** @description Content Type has been unpublished. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentTypeDetailsDto"];
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  PermissionSet_GetPermissionSets: {
    /** Get app permission sets. */
    parameters: {
        /** @description Optional OData full text search. */
        /** @description Optional number of permissionSet to take. */
        /** @description Optional number of permissionSet to skip. */
        /** @description Optional OData order definition. */
        /** @description Optional OData filter definition. */
      query?: {
        $search?: string;
        $top?: number;
        $skip?: number;
        $orderby?: string;
        $filter?: string;
      };
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description App permission sets returned. */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionSetsDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  PermissionSet_PostPermissionSet: {
    /** Add permission set to app. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description Permission set object that needs to be added to the app. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionSetRequestDto"];
      };
    };
    responses: {
      /** @description Permission set added to app. */
      201: {
        content: {
          "application/json": components["schemas"]["PermissionSetDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  PermissionSet_GetPermissionSet: {
    /** Get single permission set. */
    parameters: {
        /** @description The name of the app. */
        /** @description Permission set Id to retrieve. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description App permission sets returned. */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionSetDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  PermissionSet_PutPermissionSet: {
    /** Update permission set. */
    parameters: {
        /** @description App Name (routing only). */
        /** @description PermissionSet Id to Update. */
      path: {
        app: string;
        id: string;
      };
    };
    /** @description Update Request dto. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionSetRequestDto"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
      /** @description App/PermissionSet Not Found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  PermissionSet_DeletePermissionSet: {
    /** Remove permission set from app. */
    parameters: {
        /** @description The name of the app. */
        /** @description The id of the permission set. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Permission set removed from app. */
      204: never;
      /** @description Permission set is not found on app. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  PermissionSet_PutPermissionSetGroup: {
    /** Update permission set group permission. */
    parameters: {
        /** @description App Name (routing only). */
        /** @description Permission set Id to Update. */
      path: {
        app: string;
        id: string;
      };
    };
    /** @description Update Request dto. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePermissionSetGroupDto"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
      /** @description App/Permission set/Group Not Found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  PermissionSet_PutPermissionSetClient: {
    /** Update permission set client permission. */
    parameters: {
        /** @description App Name (routing only). */
        /** @description Permission set Id to Update. */
      path: {
        app: string;
        id: string;
      };
    };
    /** @description Update Request dto. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePermissionSetClientDto"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
      /** @description App/Permission set/Client Not Found. */
      404: {
        content: {
          "application/json": components["schemas"]["ProblemDetails"];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Languages_GetLanguages: {
    /**
     * Get supported languages. 
     * @description Provide a list of supported language codes, following the ISO2Code standard.
     */
    responses: {
      /** @description Supported language codes returned. */
      200: {
        content: {
          "application/json": (components["schemas"]["LanguageDto"])[];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  History_GetHistory: {
    /** Get historical events. */
    parameters: {
        /** @description The name of the channel. */
      query?: {
        channel?: string | null;
      };
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Events returned. */
      200: {
        content: {
          "application/json": (components["schemas"]["HistoryEventDto"])[];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_PostGraphQLGET: {
    /**
     * GraphQL endpoint. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description The graphql query. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["GraphQLQuery"];
      };
    };
    responses: {
      /** @description Contents retrieved or mutated. */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_PostGraphQLPOST: {
    /**
     * GraphQL endpoint. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description The graphql query. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["GraphQLQuery"];
      };
    };
    responses: {
      /** @description Contents retrieved or mutated. */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_PostGraphQLBatchGET: {
    /**
     * GraphQL endpoint (Batch). 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description The graphql queries. */
    requestBody: {
      content: {
        "application/json": (components["schemas"]["GraphQLQuery"])[];
      };
    };
    responses: {
      /** @description Contents retrieved or mutated. */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_PostGraphQLBatchPOST: {
    /**
     * GraphQL endpoint (Batch). 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description The graphql queries. */
    requestBody: {
      content: {
        "application/json": (components["schemas"]["GraphQLQuery"])[];
      };
    };
    responses: {
      /** @description Contents retrieved or mutated. */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_GetAllContents: {
    /**
     * Queries contents. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The optional ids of the content to fetch. */
      query?: {
        ids?: string | null;
      };
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Contents retrieved. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentsDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_GetAllContentsPost: {
    /**
     * Queries contents. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description The required query object. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContentsIdsQueryDto"];
      };
    };
    responses: {
      /** @description Contents retrieved. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentsDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_GetContents: {
    /**
     * Queries contents. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The optional ids of the content to fetch. */
        /** @description The optional json query. */
        /** @description Optional OData full text search. */
        /** @description Optional number of content to take. */
        /** @description Optional number of content to skip. */
        /** @description Optional OData order definition. */
        /** @description Optional OData filter definition. */
      query?: {
        ids?: string | null;
        q?: string | null;
        $search?: string;
        $top?: number;
        $skip?: number;
        $orderby?: string;
        $filter?: string;
      };
        /** @description The name of the app. */
        /** @description The name of the content type. */
      path: {
        app: string;
        name: string;
      };
    };
    responses: {
      /** @description Contents retrieved. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentsDto"];
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_PostContent: {
    /**
     * Create a content item. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description True to automatically publish the content. */
      query?: {
        publish?: boolean;
      };
        /** @description The name of the app. */
        /** @description The name of the content type. */
      path: {
        app: string;
        name: string;
      };
    };
    /** @description The full data for the content item. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NamedContentDataDto"];
      };
    };
    responses: {
      /** @description Content created. */
      201: {
        content: {
          "application/json": components["schemas"]["ContentDto"];
        };
      };
      /** @description Content data is not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content, content type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_GetContentsPost: {
    /**
     * Queries contents. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
      path: {
        app: string;
        name: string;
      };
    };
    /** @description The required query object. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["QueryDto"];
      };
    };
    responses: {
      /** @description Contents retrieved. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentsDto"];
        };
      };
      /** @description Content Type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_GetContentGET: {
    /**
     * Get a content item. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the content to fetch. */
      path: {
        app: string;
        name: string;
        id: string;
      };
    };
    responses: {
      /** @description Content found. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentDto"];
        };
      };
      /** @description Content, content type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_PutContent: {
    /**
     * Update a content item. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the content item to update. */
      path: {
        app: string;
        name: string;
        id: string;
      };
    };
    /** @description The full data for the content item. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NamedContentDataDto"];
      };
    };
    responses: {
      /** @description Content updated. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentDto"];
        };
      };
      /** @description Content data is not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content references, content type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_DeleteContent: {
    /**
     * Delete a content item. 
     * @description You can create an generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the content item to delete. */
      path: {
        app: string;
        name: string;
        id: string;
      };
    };
    responses: {
      /** @description Content deleted. */
      204: never;
      /** @description Content, content type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_GetContentHEAD: {
    /**
     * Get a content item. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the content to fetch. */
      path: {
        app: string;
        name: string;
        id: string;
      };
    };
    responses: {
      /** @description Content found. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentDto"];
        };
      };
      /** @description Content, content type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_PatchContent: {
    /**
     * Patchs a content item. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the content item to patch. */
      path: {
        app: string;
        name: string;
        id: string;
      };
    };
    /** @description The patch for the content item. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NamedContentDataDto"];
      };
    };
    responses: {
      /** @description Content patched. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentDto"];
        };
      };
      /** @description Content patch is not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content, content type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_GetContentVersion: {
    /**
     * Get a content by version. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the content to fetch. */
        /** @description The version fo the content to fetch. */
      path: {
        app: string;
        name: string;
        id: string;
        version: number;
      };
    };
    responses: {
      /** @description Content found. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentDto"];
        };
      };
      /** @description Content data is not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content, content type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_BulkContents: {
    /**
     * Bulk insert/update content items. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
      path: {
        app: string;
        name: string;
      };
    };
    /** @description The bulk update request. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkUpdateDto"];
      };
    };
    responses: {
      /** @description Contents created/updated. */
      200: {
        content: {
          "application/json": (components["schemas"]["BulkResultDto"])[];
        };
      };
      /** @description Content data is not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content references, content type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_PutContentStatus: {
    /**
     * Change status for a content item. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the content item to publish. */
      path: {
        app: string;
        name: string;
        id: string;
      };
    };
    /** @description The status request. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangeStatusDto"];
      };
    };
    responses: {
      /** @description Content status updated. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentDto"];
        };
      };
      /** @description Request is not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content, content type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_CreateDraft: {
    /**
     * Create a new version. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the content item to discard changes. */
      path: {
        app: string;
        name: string;
        id: string;
      };
    };
    responses: {
      /** @description Content draft created. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentDto"];
        };
      };
      /** @description Content, content type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_DeleteVersion: {
    /**
     * Discard changes. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the content item to discard changes. */
      path: {
        app: string;
        name: string;
        id: string;
      };
    };
    responses: {
      /** @description Content draft version deleted. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentDto"];
        };
      };
      /** @description Content, content type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_GenerateTagsForContent: {
    /** Generate Tags from Content. */
    parameters: {
      path: {
        app: string;
        name: string;
        id: string;
      };
    };
    /** @description Text to generate tags. */
    requestBody: {
      content: {
        "application/json": string;
      };
    };
    responses: {
      /** @description Tags Generated. */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_UpdateNotification: {
    /**
     * Updates the NotificationDetails of a content item. 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the content item to update. */
      path: {
        app: string;
        name: string;
        id: string;
      };
    };
    /** @description The notification details of the content item. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationDetails"];
      };
    };
    responses: {
      /** @description Content updated. */
      204: never;
      /** @description Content, content type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_ClearSchedule: {
    /** Clear Content Schedule. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the Content Type. */
        /** @description The id of the content item to clear schedule. */
      path: {
        app: string;
        name: string;
        id: string;
      };
    };
    responses: {
      /** @description Schedule has been cleared. */
      204: never;
      /** @description Content, Content Type, or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_GetPermissions: {
    /** Gets the user permissions for the content type. */
    parameters: {
        /** @description The id of the permission set. */
      query?: {
        permissionSetId?: string;
      };
        /** @description The name of the app. */
        /** @description The name of the Content Type. */
      path: {
        app: string;
        name: string;
      };
    };
    responses: {
      /** @description Permissions retrieved. */
      200: {
        content: {
          "application/json": {
            [key: string]: components["schemas"]["ResourceLink"] | undefined;
          };
        };
      };
      /** @description Content type or permission set not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_DecryptContent: {
    /** Decrypts all encrypted fields of the content item. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the content item. */
      path: {
        app: string;
        name: string;
        id: string;
      };
    };
    responses: {
      /** @description The content item with all fields decrypted. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentDto"];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_PutContentStatusString: {
    /**
     * Change status for a content item.
     * Obsolete - Update to use the /status endpoint 
     * @deprecated 
     * @description You can read the generated documentation for your app at /api/content/{appName}/docs.
     */
    parameters: {
      query?: {
        dueTime?: string | null;
      };
        /** @description The name of the app. */
        /** @description The name of the content type. */
        /** @description The id of the content item. */
        /** @description The status to update content item to. */
      path: {
        app: string;
        name: string;
        id: string;
        status: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationDetails"];
      };
    };
    responses: {
      /** @description Content status updated. */
      200: {
        content: {
          "application/json": components["schemas"]["ContentDto"];
        };
      };
      /** @description Request is not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Content, content type or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Contents_GetTags: {
    /**
     * Get content tags. 
     * @description Get all tags for a content type.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the content type. */
      path: {
        app: string;
        name: string;
      };
    };
    responses: {
      /** @description Tags returned. */
      200: {
        content: {
          "application/json": {
            [key: string]: number | undefined;
          };
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Categories_GetCategories: {
    /** Get app categories. */
    parameters: {
        /** @description Optional OData full text search. */
        /** @description Optional number of category to take. */
        /** @description Optional number of category to skip. */
        /** @description Optional OData order definition. */
        /** @description Optional OData filter definition. */
      query?: {
        $search?: string;
        $top?: number;
        $skip?: number;
        $orderby?: string;
        $filter?: string;
      };
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description App categories returned. */
      200: {
        content: {
          "application/json": components["schemas"]["CategoriesDto"];
        };
      };
      /** @description App or Category not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Categories_PostCategory: {
    /** Add category to app. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description Category object that needs to be added to the app. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryRequestDto"];
      };
    };
    responses: {
      /** @description Category added to app. */
      201: {
        content: {
          "application/json": components["schemas"]["CategoryDto"];
        };
      };
      /** @description App or Category not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Categories_GetCategory: {
    /** Get single category. */
    parameters: {
        /** @description The name of the app. */
        /** @description Cateogry Id to retrieve. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description App categories returned. */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryDto"];
        };
      };
      /** @description App or Category not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Categories_PutCategory: {
    /** Update category. */
    parameters: {
        /** @description App Name (routing only). */
        /** @description Category Id to Update. */
      path: {
        app: string;
        id: string;
      };
    };
    /** @description Update Request dto. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryRequestDto"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
      /** @description App or Category not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Categories_DeleteCategory: {
    /** Remove category from app. */
    parameters: {
        /** @description The name of the app. */
        /** @description The id of the category. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Category removed from app. */
      204: never;
      /** @description Category is not found on app. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description App or Category not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  BackupContent_GetBackupContent: {
    /** Get the backup content. */
    parameters: {
        /** @description The name of the app. */
        /** @description The id of the asset. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Backup found and content returned. */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Backup or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Backups_DeleteBackup: {
    /** Delete a backup. */
    parameters: {
        /** @description The name of the app. */
        /** @description The id of the backup to delete. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Backup started. */
      204: never;
      /** @description Backup or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Backups_GetBackups: {
    /** Get all backup jobs. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Backups returned. */
      200: {
        content: {
          "application/json": components["schemas"]["BackupJobsDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Backups_PostBackup: {
    /** Start a new backup. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Backup started. */
      204: never;
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Restore_GetRestoreJob: {
    /** Get current restore status. */
    responses: {
      /** @description Status returned. */
      200: {
        content: {
          "application/json": components["schemas"]["RestoreJobDto"];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Restore_PostRestoreJob: {
    /** Restore a backup. */
    /** @description The backup to restore. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RestoreRequestDto"];
      };
    };
    responses: {
      /** @description Restore operation started. */
      204: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AssetContent_GetAssetContentBySlug: {
    /** Get the asset content. */
    parameters: {
        /** @description The optional version of the asset. */
        /** @description The cache duration in seconds. */
        /** @description Set it to 0 to prevent download. */
        /** @description The target width of the asset, if it is an image. */
        /** @description The target height of the asset, if it is an image. */
        /** @description Optional image quality, it is is an jpeg image. */
        /** @description The resize mode when the width and height is defined. */
        /** @description Override the y focus point. */
        /** @description Override the x focus point. */
        /** @description True to ignore the asset focus point if any. */
        /** @description True to force a new resize even if it already stored. */
        /** @description The search scope. Either 'all' (any status) or 'published'>. */
      query?: {
        version?: number;
        cache?: number;
        download?: number;
        width?: number | null;
        height?: number | null;
        quality?: number | null;
        mode?: components["schemas"]["ResizeMode"];
        focusX?: number | null;
        focusY?: number | null;
        nofocus?: boolean;
        force?: boolean;
        scope?: components["schemas"]["SearchScope"];
      };
        /** @description The name of the app. */
        /** @description The id or slug of the asset. */
        /** @description Optional suffix that can be used to seo-optimize the link to the image Has not effect. */
      path: {
        app: string;
        idOrSlug: string;
        more: string;
      };
    };
    responses: {
      /** @description Asset found and content or (resized) image returned. */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AssetContent_GetAssetContent: {
    /** Get the asset content. */
    parameters: {
        /** @description The optional version of the asset. */
        /** @description The cache duration in seconds. */
        /** @description Set it to 0 to prevent download. */
        /** @description The target width of the asset, if it is an image. */
        /** @description The target height of the asset, if it is an image. */
        /** @description Optional image quality, it is is an jpeg image. */
        /** @description The resize mode when the width and height is defined. */
        /** @description Override the y focus point. */
        /** @description Override the x focus point. */
        /** @description True to ignore the asset focus point if any. */
        /** @description True to force a new resize even if it already stored. */
        /** @description The search scope. Either 'all' (any status) or 'published'>. */
      query?: {
        version?: number;
        cache?: number;
        download?: number;
        width?: number | null;
        height?: number | null;
        quality?: number | null;
        mode?: components["schemas"]["ResizeMode"];
        focusX?: number | null;
        focusY?: number | null;
        nofocus?: boolean;
        force?: boolean;
        scope?: components["schemas"]["SearchScope"];
      };
        /** @description The id of the asset. */
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Asset found and content or (resized) image returned. */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_GetTags: {
    /**
     * Get assets tags. 
     * @description Get all tags for assets.
     */
    parameters: {
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Flattens fields with a single value (removing the language/invariant property). */
        /** @description Prevents enriching content with reference data and asset urls. */
        /** @description Prevents resolving missing languages to the fallback langauge. */
        /** @description Disable cleanup of reference and asset ids. (Deleted references will be returned). */
        /** @description Comma-separated list of languagues to resolve, when omitted, all languages are resolved. Ex: en,es */
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-ResolveFlow"?: string | null;
        "X-ResolveFlow-Assets"?: string | null;
        "X-ResolveFlow-Contents"?: string | null;
        "X-Flatten"?: string | null;
        "X-NoEnrichment"?: string | null;
        "X-NoResolveLanguages"?: string | null;
        "X-NoCleanup"?: string | null;
        "X-Languages"?: string | null;
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Assets returned. */
      200: {
        content: {
          "application/json": {
            [key: string]: number | undefined;
          };
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_GetAssets: {
    /**
     * Get assets. 
     * @description Get all assets for the app.
     */
    parameters: {
        /** @description The optional parent folder id. */
        /** @description The optional asset ids. */
        /** @description The optional json query. */
        /** @description Optional OData full text search. */
        /** @description Optional number of assets to take. */
        /** @description Optional number of assets to skip. */
        /** @description Optional OData order definition. */
        /** @description Optional OData filter definition. */
      query?: {
        parentId?: string | null;
        ids?: string | null;
        q?: string | null;
        $search?: string;
        $top?: number;
        $skip?: number;
        $orderby?: string;
        $filter?: string;
      };
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Flattens fields with a single value (removing the language/invariant property). */
        /** @description Prevents enriching content with reference data and asset urls. */
        /** @description Prevents resolving missing languages to the fallback langauge. */
        /** @description Disable cleanup of reference and asset ids. (Deleted references will be returned). */
        /** @description Comma-separated list of languagues to resolve, when omitted, all languages are resolved. Ex: en,es */
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-ResolveFlow"?: string | null;
        "X-ResolveFlow-Assets"?: string | null;
        "X-ResolveFlow-Contents"?: string | null;
        "X-Flatten"?: string | null;
        "X-NoEnrichment"?: string | null;
        "X-NoResolveLanguages"?: string | null;
        "X-NoCleanup"?: string | null;
        "X-Languages"?: string | null;
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Assets returned. */
      200: {
        content: {
          "application/json": components["schemas"]["AssetsDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_PostAsset: {
    /**
     * Upload a new asset. 
     * @description You can only upload one file at a time. The mime type of the file is not calculated by CivicPlus and is required correctly.
     */
    parameters: {
        /** @description The optional parent folder id. */
        /** @description Whether or not to publish asset. */
      query?: {
        parentId?: string;
        publish?: boolean;
      };
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          briefDescription?: string | null;
          tags?: (string)[] | null;
          categories?: (string)[] | null;
          /** Format: guid */
          permissionSet?: string | null;
          emailAddresses?: (string)[] | null;
          NotificationOption?: components["schemas"]["NotificationOption"];
          /** Format: int32 */
          DaysInAdvance?: number | null;
          Subject?: string | null;
          EmailIntroduction?: string | null;
          SmsMessage?: string | null;
          /** Format: date-time */
          SendAt?: string | null;
          EventType?: string | null;
          metadata?: ({
            [key: string]: string | undefined;
          }) | null;
        };
      };
    };
    responses: {
      /** @description Asset created. */
      201: {
        content: {
          "application/json": components["schemas"]["AssetDto"];
        };
      };
      /** @description Asset exceeds the maximum size. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_GetAssetsPost: {
    /**
     * Get assets. 
     * @description Get all assets for the app.
     */
    parameters: {
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description The required query object. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["QueryDto"];
      };
    };
    responses: {
      /** @description Assets returned. */
      200: {
        content: {
          "application/json": components["schemas"]["AssetsDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_GetAsset: {
    /** Get an asset by id. */
    parameters: {
      query?: {
        version?: number;
      };
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Flattens fields with a single value (removing the language/invariant property). */
        /** @description Prevents enriching content with reference data and asset urls. */
        /** @description Prevents resolving missing languages to the fallback langauge. */
        /** @description Disable cleanup of reference and asset ids. (Deleted references will be returned). */
        /** @description Comma-separated list of languagues to resolve, when omitted, all languages are resolved. Ex: en,es */
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-ResolveFlow"?: string | null;
        "X-ResolveFlow-Assets"?: string | null;
        "X-ResolveFlow-Contents"?: string | null;
        "X-Flatten"?: string | null;
        "X-NoEnrichment"?: string | null;
        "X-NoResolveLanguages"?: string | null;
        "X-NoCleanup"?: string | null;
        "X-Languages"?: string | null;
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
        /** @description The id of the asset to retrieve. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Asset found. */
      200: {
        content: {
          "application/json": components["schemas"]["AssetDto"];
        };
      };
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_PutAsset: {
    /** Updates the asset. */
    parameters: {
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
        /** @description The id of the asset. */
      path: {
        app: string;
        id: string;
      };
    };
    /** @description The asset object that needs to updated. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AnnotateAssetDto"];
      };
    };
    responses: {
      /** @description Asset updated. */
      200: {
        content: {
          "application/json": components["schemas"]["AssetDto"];
        };
      };
      /** @description Asset name not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_DeleteAsset: {
    /** Delete an asset. */
    parameters: {
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
        /** @description The id of the asset to delete. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Asset deleted. */
      204: never;
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_PutAssetContent: {
    /**
     * Replace asset content. 
     * @description Use multipart request to upload an asset.
     */
    parameters: {
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
        /** @description The id of the asset. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Asset updated. */
      200: {
        content: {
          "application/json": components["schemas"]["AssetDto"];
        };
      };
      /** @description Asset exceeds the maximum size. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_CreateDraft: {
    /** Create a new version. */
    parameters: {
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
        /** @description The id of the asset to discard changes. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Asset version created. */
      200: {
        content: {
          "application/json": components["schemas"]["AssetDto"];
        };
      };
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_DeleteDraft: {
    /** Discard changes. */
    parameters: {
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
        /** @description The id of the asset to discard the version. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Asset version deleted. */
      200: {
        content: {
          "application/json": components["schemas"]["AssetDto"];
        };
      };
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_PutAssetStatus: {
    /** Update status. */
    parameters: {
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
        /** @description The id of the asset to update the status. */
      path: {
        app: string;
        id: string;
      };
    };
    /** @description The status change request. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangeAssetStatusDto"];
      };
    };
    responses: {
      /** @description Asset status updated. */
      200: {
        content: {
          "application/json": components["schemas"]["AssetDto"];
        };
      };
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_Suggestions: {
    /**
     * Analyze asset and retrieve tags and descriptions. 
     * @description You can only analyze one file at a time.
     */
    parameters: {
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Suggestions retreived. */
      200: {
        content: {
          "application/json": components["schemas"]["AssetSuggestionResults"];
        };
      };
      /** @description Asset exceeds the maximum size. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_GetPermissions: {
    /** Gets the user permissions for the asset. */
    parameters: {
        /** @description The id of the permission set. */
      query?: {
        permissionSetId?: string;
      };
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Flattens fields with a single value (removing the language/invariant property). */
        /** @description Prevents enriching content with reference data and asset urls. */
        /** @description Prevents resolving missing languages to the fallback langauge. */
        /** @description Disable cleanup of reference and asset ids. (Deleted references will be returned). */
        /** @description Comma-separated list of languagues to resolve, when omitted, all languages are resolved. Ex: en,es */
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-ResolveFlow"?: string | null;
        "X-ResolveFlow-Assets"?: string | null;
        "X-ResolveFlow-Contents"?: string | null;
        "X-Flatten"?: string | null;
        "X-NoEnrichment"?: string | null;
        "X-NoResolveLanguages"?: string | null;
        "X-NoCleanup"?: string | null;
        "X-Languages"?: string | null;
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Permissions retrieved. */
      200: {
        content: {
          "application/json": {
            [key: string]: components["schemas"]["ResourceLink"] | undefined;
          };
        };
      };
      /** @description Permission set not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_ClearSchedule: {
    /** Clear Asset Schedule. */
    parameters: {
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
        /** @description The id of the asset to clear schedule. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Schedule has been cleared. */
      204: never;
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_UpdateNotification: {
    /** Updates the NotificationDetails of an asset. */
    parameters: {
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
        /** @description The id of the asset to update. */
      path: {
        app: string;
        id: string;
      };
    };
    /** @description The notification details of the asset. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationDetails"];
      };
    };
    responses: {
      /** @description Asset updated. */
      204: never;
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Assets_PutAssetStringStatus: {
    /**
     * Update asset status. 
     * @deprecated
     */
    parameters: {
      query?: {
        dueTime?: string | null;
      };
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
        /** @description The id of the asset to update the status. */
        /** @description Status to move asset to. */
      path: {
        app: string;
        id: string;
        status: string;
      };
    };
    /** @description The status change request. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangeAssetStatusDto"];
      };
    };
    responses: {
      /** @description Asset status updated. */
      200: {
        content: {
          "application/json": components["schemas"]["AssetDto"];
        };
      };
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AssetsEncrypted_GetAsset: {
    /**
     * Get an encrypted asset by id. 
     * @deprecated
     */
    parameters: {
      query?: {
        version?: number;
      };
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Flattens fields with a single value (removing the language/invariant property). */
        /** @description Prevents enriching content with reference data and asset urls. */
        /** @description Prevents resolving missing languages to the fallback langauge. */
        /** @description Disable cleanup of reference and asset ids. (Deleted references will be returned). */
        /** @description Comma-separated list of languagues to resolve, when omitted, all languages are resolved. Ex: en,es */
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-ResolveFlow"?: string | null;
        "X-ResolveFlow-Assets"?: string | null;
        "X-ResolveFlow-Contents"?: string | null;
        "X-Flatten"?: string | null;
        "X-NoEnrichment"?: string | null;
        "X-NoResolveLanguages"?: string | null;
        "X-NoCleanup"?: string | null;
        "X-Languages"?: string | null;
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
        /** @description The id of the asset to retrieve. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Asset found. */
      200: {
        content: {
          "application/json": components["schemas"]["AssetDto"];
        };
      };
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AssetsEncrypted_PutAssetPUT: {
    /**
     * Updates the encrypted asset metadata. 
     * @deprecated
     */
    parameters: {
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
        /** @description The id of the asset. */
      path: {
        app: string;
        id: string;
      };
    };
    /** @description The asset object that needs to updated. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AnnotateAssetDto"];
      };
    };
    responses: {
      /** @description Asset updated. */
      204: never;
      /** @description Asset name not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AssetsEncrypted_DeleteAsset: {
    /**
     * Delete an encrypted asset. 
     * @deprecated
     */
    parameters: {
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
        /** @description The id of the asset to delete. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Asset has been deleted. */
      204: never;
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AssetsEncrypted_PutAssetPATCH: {
    /**
     * Updates the encrypted asset metadata. 
     * @deprecated
     */
    parameters: {
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
        /** @description The id of the asset. */
      path: {
        app: string;
        id: string;
      };
    };
    /** @description The asset object that needs to updated. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AnnotateAssetDto"];
      };
    };
    responses: {
      /** @description Asset updated. */
      204: never;
      /** @description Asset name not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Asset or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AssetsEncrypted_PostAsset: {
    /**
     * Upload a new encrypted asset. 
     * @deprecated 
     * @description You can only upload one file at a time. The mime type of the file is not calculated by CivicPlus and is required correctly.
     */
    parameters: {
        /** @description The optional parent folder id. */
      query?: {
        parentId?: string;
      };
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          tags?: (string)[] | null;
          categories?: (string)[] | null;
          /** Format: guid */
          permissionSet?: string | null;
          NotificationOption?: components["schemas"]["NotificationOption"];
          /** Format: int32 */
          DaysInAdvance?: number | null;
          Subject?: string | null;
          EmailIntroduction?: string | null;
          SmsMessage?: string | null;
          /** Format: date-time */
          SendAt?: string | null;
          EventType?: string | null;
          emailAddresses?: (string)[] | null;
        };
      };
    };
    responses: {
      /** @description Asset created. */
      201: {
        content: {
          "application/json": components["schemas"]["AssetDto"];
        };
      };
      /** @description Asset exceeds the maximum size. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AssetsEncrypted_GetAssetContent: {
    /**
     * Download an encrypted asset. 
     * @deprecated
     */
    parameters: {
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Resolves all available status/transitions in the _links property. */
        /** @description Flattens fields with a single value (removing the language/invariant property). */
        /** @description Prevents enriching content with reference data and asset urls. */
        /** @description Prevents resolving missing languages to the fallback langauge. */
        /** @description Disable cleanup of reference and asset ids. (Deleted references will be returned). */
        /** @description Comma-separated list of languagues to resolve, when omitted, all languages are resolved. Ex: en,es */
        /** @description Retrieve, update or create non-published items. */
        /** @description Retrieve, update or create an item using encryption. */
        /** @description Decrypt encrypted fields on an encrypted item. */
        /** @description Comma-separated list of field names to resolve asset/reference urls. Returns url instead of ID when set. */
      header?: {
        "X-ResolveFlow"?: string | null;
        "X-ResolveFlow-Assets"?: string | null;
        "X-ResolveFlow-Contents"?: string | null;
        "X-Flatten"?: string | null;
        "X-NoEnrichment"?: string | null;
        "X-NoResolveLanguages"?: string | null;
        "X-NoCleanup"?: string | null;
        "X-Languages"?: string | null;
        "X-Unpublished"?: string | null;
        "X-Encrypted"?: string | null;
        "X-Decrypted"?: string | null;
        "X-Resolve-Urls"?: string | null;
      };
        /** @description The id of the asset to download. */
        /** @description The name of the app. */
      path: {
        id: string;
        app: string;
        more: string;
      };
    };
    responses: {
      /** @description Asset has been downloaded. */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Asset or app not found. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppClients_GetClients: {
    /**
     * Get app clients. 
     * @description Gets all configured clients for the app with the specified name.
     */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Client keys returned. */
      200: {
        content: {
          "application/json": components["schemas"]["ClientsDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppClients_PostClient: {
    /**
     * Create a new app client. 
     * @description Create a new client for the app with the specified name.
     * The client secret is auto generated on the server and returned. The client does not exire, the access token is valid for 30 days.
     */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description Client object that needs to be added to the app. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateClientDto"];
      };
    };
    responses: {
      /** @description Client generated. */
      201: {
        content: {
          "application/json": components["schemas"]["ClientsDto"];
        };
      };
      /** @description Client request not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppClients_PutClient: {
    /**
     * Updates an app client. 
     * @description Only the display name can be changed, create a new client if necessary.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The id of the client that must be updated. */
      path: {
        app: string;
        id: string;
      };
    };
    /** @description Client object that needs to be updated. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateClientDto"];
      };
    };
    responses: {
      /** @description Client updated. */
      200: {
        content: {
          "application/json": components["schemas"]["ClientsDto"];
        };
      };
      /** @description Client request not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Client or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppClients_DeleteClient: {
    /**
     * Revoke an app client. 
     * @description The application that uses this client credentials cannot access the API after it has been revoked.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The id of the client that must be deleted. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Client revoked. */
      200: {
        content: {
          "application/json": components["schemas"]["ClientsDto"];
        };
      };
      /** @description Client or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppContributors_GetContributors: {
    /** Get app contributors. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description App contributors returned. */
      200: {
        content: {
          "application/json": components["schemas"]["ContributorsDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppContributors_PostContributor: {
    /** Assign contributor to app. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description Contributor object that needs to be added to the app. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssignContributorDto"];
      };
    };
    responses: {
      /** @description User assigned to app. */
      201: {
        content: {
          "application/json": components["schemas"]["ContributorsDto"];
        };
      };
      /** @description User is not found. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppContributors_DeleteContributor: {
    /** Remove contributor. */
    parameters: {
        /** @description The name of the app. */
        /** @description The id of the contributor. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description User removed from app. */
      200: {
        content: {
          "application/json": components["schemas"]["ContributorsDto"];
        };
      };
      /** @description Contributor or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppLanguages_GetLanguages: {
    /** Get app languages. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Language configuration returned. */
      200: {
        content: {
          "application/json": components["schemas"]["AppLanguagesDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppLanguages_PostLanguage: {
    /** Attaches an app language. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description The language to add to the app. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddLanguageDto"];
      };
    };
    responses: {
      /** @description Language created. */
      201: {
        content: {
          "application/json": components["schemas"]["AppLanguagesDto"];
        };
      };
      /** @description Language request not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppLanguages_PutLanguage: {
    /** Updates an app language. */
    parameters: {
        /** @description The name of the app. */
        /** @description The language to update. */
      path: {
        app: string;
        language: string;
      };
    };
    /** @description The language object. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateLanguageDto"];
      };
    };
    responses: {
      /** @description Language updated. */
      200: {
        content: {
          "application/json": components["schemas"]["AppLanguagesDto"];
        };
      };
      /** @description Language request not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Language or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppLanguages_DeleteLanguage: {
    /** Deletes an app language. */
    parameters: {
        /** @description The name of the app. */
        /** @description The language to delete from the app. */
      path: {
        app: string;
        language: string;
      };
    };
    responses: {
      /** @description Language deleted. */
      200: {
        content: {
          "application/json": components["schemas"]["AppLanguagesDto"];
        };
      };
      /** @description Language is master language. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Language or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppPatterns_GetPatterns: {
    /**
     * Get app patterns. 
     * @description Gets all configured regex patterns for the app with the specified name.
     */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Patterns returned. */
      200: {
        content: {
          "application/json": components["schemas"]["PatternsDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppPatterns_PostPattern: {
    /** Create a new app pattern. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description Pattern to be added to the app. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePatternDto"];
      };
    };
    responses: {
      /** @description Pattern generated. */
      201: {
        content: {
          "application/json": components["schemas"]["PatternsDto"];
        };
      };
      /** @description Pattern request not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppPatterns_PutPattern: {
    /** Update an app pattern. */
    parameters: {
        /** @description The name of the app. */
        /** @description The id of the pattern to be updated. */
      path: {
        app: string;
        id: string;
      };
    };
    /** @description Pattern to be updated for the app. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePatternDto"];
      };
    };
    responses: {
      /** @description Pattern updated. */
      200: {
        content: {
          "application/json": components["schemas"]["PatternsDto"];
        };
      };
      /** @description Pattern request not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Pattern or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppPatterns_DeletePattern: {
    /**
     * Delete an app pattern. 
     * @description Content Types using this pattern will still function using the same Regular Expression.
     */
    parameters: {
        /** @description The name of the app. */
        /** @description The id of the pattern to be deleted. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Pattern removed. */
      200: {
        content: {
          "application/json": components["schemas"]["PatternsDto"];
        };
      };
      /** @description Pattern or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppRoles_GetRoles: {
    /** Get app roles. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description App roles returned. */
      200: {
        content: {
          "application/json": components["schemas"]["RolesDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppRoles_PostRole: {
    /** Add role to app. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description Role object that needs to be added to the app. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddRoleDto"];
      };
    };
    responses: {
      /** @description User assigned to app. */
      201: {
        content: {
          "application/json": components["schemas"]["RolesDto"];
        };
      };
      /** @description Role name already in use. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppRoles_GetPermissions: {
    /** Get app permissions. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description App permissions returned. */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppRoles_PutRole: {
    /** Update an app role. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the role to be updated. */
      path: {
        app: string;
        roleName: string;
      };
    };
    /** @description Role to be updated for the app. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateRoleDto"];
      };
    };
    responses: {
      /** @description Role updated. */
      200: {
        content: {
          "application/json": components["schemas"]["RolesDto"];
        };
      };
      /** @description Role request not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Role or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppRoles_DeleteRole: {
    /** Remove role from app. */
    parameters: {
        /** @description The name of the app. */
        /** @description The name of the role. */
      path: {
        app: string;
        roleName: string;
      };
    };
    responses: {
      /** @description Role deleted. */
      200: {
        content: {
          "application/json": components["schemas"]["RolesDto"];
        };
      };
      /** @description Role is in use by contributor or client or default role. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Role or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Apps_GetApps: {
    /**
     * Get your apps. 
     * @description You can only retrieve the list of apps when you are authenticated as a user (OpenID implicit flow).
     * You will retrieve all apps, where you are assigned as a contributor.
     */
    responses: {
      /** @description Apps returned. */
      200: {
        content: {
          "application/json": (components["schemas"]["AppDto"])[];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Apps_PostApp: {
    /**
     * Create a new app. 
     * @description You can only create an app when you are authenticated as a user (OpenID implicit flow).
     * You will be assigned as owner of the new app automatically.
     */
    /** @description The app object that needs to be added to CivicPlus. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAppDto"];
      };
    };
    responses: {
      /** @description App created. */
      201: {
        content: {
          "application/json": components["schemas"]["AppDto"];
        };
      };
      /** @description App request not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description App name is already in use. */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Apps_GetApp: {
    /** Get an app by name. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Apps returned. */
      200: {
        content: {
          "application/json": components["schemas"]["AppDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Apps_UpdateApp: {
    /** Update the app. */
    parameters: {
        /** @description The name of the app to update. */
      path: {
        app: string;
      };
    };
    /** @description The values to update. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAppDto"];
      };
    };
    responses: {
      /** @description App updated. */
      200: {
        content: {
          "application/json": components["schemas"]["AppDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Apps_DeleteApp: {
    /** Archive the app. */
    parameters: {
        /** @description The name of the app to archive. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description App archived. */
      204: never;
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Apps_GetImage: {
    /** Get the app image. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description App image found and content or (resized) image returned. */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Apps_UploadImage: {
    /** Get the app image. */
    parameters: {
        /** @description The name of the app to update. */
      path: {
        app: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string | null;
        };
      };
    };
    responses: {
      /** @description App image uploaded. */
      200: {
        content: {
          "application/json": components["schemas"]["AppDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  Apps_DeleteImage: {
    /** Remove the app image. */
    parameters: {
        /** @description The name of the app to update. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description App image removed. */
      200: {
        content: {
          "application/json": components["schemas"]["AppDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppWorkflows_GetWorkflows: {
    /** Get app workflow. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description App workflows returned. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowsDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppWorkflows_PostWorkflow: {
    /** Create a workflow. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description The new workflow. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddWorkflowDto"];
      };
    };
    responses: {
      /** @description Workflow updated. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowsDto"];
        };
      };
      /** @description Workflow request is not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Workflow or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppWorkflows_PutWorkflow: {
    /** Update a workflow. */
    parameters: {
        /** @description The name of the app. */
        /** @description The id of the workflow to update. */
      path: {
        app: string;
        id: string;
      };
    };
    /** @description The new workflow. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateWorkflowDto"];
      };
    };
    responses: {
      /** @description Workflow updated. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowsDto"];
        };
      };
      /** @description Workflow request is not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description Workflow or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppWorkflows_DeleteWorkflow: {
    /** Delete a workflow. */
    parameters: {
        /** @description The name of the app. */
        /** @description The id of the workflow to update. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description Workflow deleted. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowsDto"];
        };
      };
      /** @description Workflow or app not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppGroups_GetGroups: {
    /** Get app groups. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description App groups returned. */
      200: {
        content: {
          "application/json": (components["schemas"]["AppGroupDto"])[];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppGroups_AssignRole: {
    /** Assign a group to an app level role. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    /** @description Group and Role to assign. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AppGroupDto"];
      };
    };
    responses: {
      /** @description Group assigned success. */
      204: never;
      /** @description App or group not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppGroups_GetGroupUsers: {
    /** Get group users. */
    parameters: {
        /** @description The name of the app. */
        /** @description The group id. */
      path: {
        app: string;
        id: string;
      };
    };
    responses: {
      /** @description App groups returned. */
      200: {
        content: {
          "application/json": (components["schemas"]["GroupMembership"])[];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
  AppGroups_Sync: {
    /** Get group users. */
    parameters: {
        /** @description The name of the app. */
      path: {
        app: string;
      };
    };
    responses: {
      /** @description Group sync has been scheduled. */
      204: never;
      /** @description Failed to schedule sync. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
      /** @description App not found. */
      404: never;
      /** @description Operation failed */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorDto"];
        };
      };
    };
  };
}
