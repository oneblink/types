/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/AbandonTransactions": {
    post: {
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["AbandonedTransactionRequest"];
          "application/json": components["schemas"]["AbandonedTransactionRequest"];
          "text/json": components["schemas"]["AbandonedTransactionRequest"];
          "application/*+json": components["schemas"]["AbandonedTransactionRequest"];
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/api/v1/BraintreeExport": {
    post: {
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["BraintreeExportRequestDto"];
          "application/json": components["schemas"]["BraintreeExportRequestDto"];
          "text/json": components["schemas"]["BraintreeExportRequestDto"];
          "application/*+json": components["schemas"]["BraintreeExportRequestDto"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["BraintreeExportResultDto"];
            "application/json": components["schemas"]["BraintreeExportResultDto"];
            "text/json": components["schemas"]["BraintreeExportResultDto"];
          };
        };
      };
    };
  };
  "/api/v1/Discovery/HasFeatures": {
    /** The HasFeatures */
    post: {
      /** The HasFeatures */
      /** @description The featureTypesSystem.Collections.Generic.IEnumerable`1 */
      requestBody?: {
        content: {
          "application/json-patch+json": (components["schemas"]["FeatureType"])[];
          "application/json": (components["schemas"]["FeatureType"])[];
          "text/json": (components["schemas"]["FeatureType"])[];
          "application/*+json": (components["schemas"]["FeatureType"])[];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": {
              None?: boolean;
              SavePaymentMethod?: boolean;
            };
            "application/json": {
              None?: boolean;
              SavePaymentMethod?: boolean;
            };
            "text/json": {
              None?: boolean;
              SavePaymentMethod?: boolean;
            };
          };
        };
      };
    };
  };
  "/api/v1/Discovery/HasFeaturesByGatewayType": {
    /** The HasFeatures */
    post: {
      /** The HasFeatures */
      /** @description The featureDiscoveryCivicPayments.Dtos.FeatureDiscovery */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["GetGatewayConfigurationFeatureInformationViewModel"];
          "application/json": components["schemas"]["GetGatewayConfigurationFeatureInformationViewModel"];
          "text/json": components["schemas"]["GetGatewayConfigurationFeatureInformationViewModel"];
          "application/*+json": components["schemas"]["GetGatewayConfigurationFeatureInformationViewModel"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": {
              None?: boolean;
              SavePaymentMethod?: boolean;
            };
            "application/json": {
              None?: boolean;
              SavePaymentMethod?: boolean;
            };
            "text/json": {
              None?: boolean;
              SavePaymentMethod?: boolean;
            };
          };
        };
      };
    };
  };
  "/api/v1/getTransactions/{format}": {
    post: {
      parameters?: {
        query?: {
          format?: string;
        };
      };
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["TransactionDataRequestDto"];
          "application/json": components["schemas"]["TransactionDataRequestDto"];
          "text/json": components["schemas"]["TransactionDataRequestDto"];
          "application/*+json": components["schemas"]["TransactionDataRequestDto"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["TransactionDataResultDto"];
            "application/json": components["schemas"]["TransactionDataResultDto"];
            "text/json": components["schemas"]["TransactionDataResultDto"];
          };
        };
      };
    };
  };
  "/api/v1/HostedCharge/{token}": {
    /** Handles serving hosted form view. */
    get: {
      /** Handles serving hosted form view. */
      parameters: {
          /** @description The token representing the form */
        path: {
          token: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/api/v1/HostedCharge": {
    /** Handles serving hosted form view. */
    post: {
      /** Handles serving hosted form view. */
      parameters?: {
          /** @description The token representing the form */
        query?: {
          formToken?: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/api/v1/HostedCharge/{token}/return": {
    get: {
      parameters: {
        path: {
          token: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
    post: {
      parameters: {
        path: {
          token: string;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            formCollection?: (components["schemas"]["StringStringValuesKeyValuePair"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/api/v1/HostedCharge/account/{accountToken}/return": {
    post: {
      parameters: {
        path: {
          accountToken: string;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            formCollection?: (components["schemas"]["StringStringValuesKeyValuePair"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/api/v1/HostedCharge/{token}/post": {
    post: {
      parameters: {
        path: {
          token: string;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            formCollection?: (components["schemas"]["StringStringValuesKeyValuePair"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/api/v1/RequestHostedForm": {
    /** Gets the data and token for a hosted form, built from the request data. */
    post: {
      /** Gets the data and token for a hosted form, built from the request data. */
      /** @description An object representing the data from which the form will be built */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["HostedFormRequestDto"];
          "application/json": components["schemas"]["HostedFormRequestDto"];
          "text/json": components["schemas"]["HostedFormRequestDto"];
          "application/*+json": components["schemas"]["HostedFormRequestDto"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["HostedFormDto"];
            "application/json": components["schemas"]["HostedFormDto"];
            "text/json": components["schemas"]["HostedFormDto"];
          };
        };
      };
    };
  };
  "/identity": {
    get: {
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/api/v1/MigrateSavedCards": {
    post: {
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["MigrateSavedCardRequestDto"];
          "application/json": components["schemas"]["MigrateSavedCardRequestDto"];
          "text/json": components["schemas"]["MigrateSavedCardRequestDto"];
          "application/*+json": components["schemas"]["MigrateSavedCardRequestDto"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["MigrateSavedCardResponseDto"];
            "application/json": components["schemas"]["MigrateSavedCardResponseDto"];
            "text/json": components["schemas"]["MigrateSavedCardResponseDto"];
          };
        };
      };
    };
  };
  "/api/v1/Refund": {
    /** Refunds the specified charge */
    post: {
      /** Refunds the specified charge */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["PaymentRefundRequestViewModel"];
          "application/json": components["schemas"]["PaymentRefundRequestViewModel"];
          "text/json": components["schemas"]["PaymentRefundRequestViewModel"];
          "application/*+json": components["schemas"]["PaymentRefundRequestViewModel"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CreditCardRefundResultDto"];
            "application/json": components["schemas"]["CreditCardRefundResultDto"];
            "text/json": components["schemas"]["CreditCardRefundResultDto"];
          };
        };
        /** @description Bad Request */
        400: never;
      };
    };
  };
  "/api/v1/SavedCardRemove": {
    /** Performs a card-on-file removal request via the API. */
    post: {
      /** Performs a card-on-file removal request via the API. */
      /** @description An object containing the details of the request */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["SavedPaymentRemoveRequestDto"];
          "application/json": components["schemas"]["SavedPaymentRemoveRequestDto"];
          "text/json": components["schemas"]["SavedPaymentRemoveRequestDto"];
          "application/*+json": components["schemas"]["SavedPaymentRemoveRequestDto"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["SavedChargeResultDto"];
            "application/json": components["schemas"]["SavedChargeResultDto"];
            "text/json": components["schemas"]["SavedChargeResultDto"];
          };
        };
      };
    };
  };
  "/api/v1/SavedCharge": {
    /** Performs a card-on-file sale request via the API. */
    post: {
      /** Performs a card-on-file sale request via the API. */
      /** @description An object containing the details of the request */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["SavedChargeRequestDto"];
          "application/json": components["schemas"]["SavedChargeRequestDto"];
          "text/json": components["schemas"]["SavedChargeRequestDto"];
          "application/*+json": components["schemas"]["SavedChargeRequestDto"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["SavedChargeResultDto"];
            "application/json": components["schemas"]["SavedChargeResultDto"];
            "text/json": components["schemas"]["SavedChargeResultDto"];
          };
        };
      };
    };
  };
  "/api/v1/SavePaymentMethodHostedForm": {
    /** The CreateSavePaymentMethodHostedForm. */
    post: {
      /** The CreateSavePaymentMethodHostedForm. */
      /** @description The commandCivicPayments.ViewModels.SavePaymentMethodHostedForm.CreateSavePaymentMethodHostedFormViewModel. */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["CreateSavePaymentMethodHostedFormViewModel"];
          "application/json": components["schemas"]["CreateSavePaymentMethodHostedFormViewModel"];
          "text/json": components["schemas"]["CreateSavePaymentMethodHostedFormViewModel"];
          "application/*+json": components["schemas"]["CreateSavePaymentMethodHostedFormViewModel"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["SavePaymentMethodHostedFormDto"];
            "application/json": components["schemas"]["SavePaymentMethodHostedFormDto"];
            "text/json": components["schemas"]["SavePaymentMethodHostedFormDto"];
          };
        };
      };
    };
  };
  "/api/v1/SavePaymentMethodHostedForm/{formId}/{transactionId}/return": {
    /** The HandleSavePaymentMethodReturnTransactionIdGet. */
    get: {
      /** The HandleSavePaymentMethodReturnTransactionIdGet. */
      parameters: {
          /** @description The formIdSystem.Int32. */
          /** @description The transactionIdSystem.Guid. */
        path: {
          formId: number;
          transactionId: string;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/api/v1/SavePaymentMethodHostedForm/{formId}/return": {
    /** The HandleSavePaymentMethodReturnGet. */
    get: {
      /** The HandleSavePaymentMethodReturnGet. */
      parameters: {
          /** @description The transactionIdSystem.Guid. */
        query?: {
          transactionId?: string;
        };
          /** @description The formIdSystem.Int32. */
        path: {
          formId: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
    /** The HandleSavePaymentMethodReturnPost. */
    post: {
      /** The HandleSavePaymentMethodReturnPost. */
      parameters: {
          /** @description The transactionIdSystem.Guid. */
        query?: {
          transactionId?: string;
        };
          /** @description The formIdSystem.Int32. */
        path: {
          formId: number;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            formCollection?: (components["schemas"]["StringStringValuesKeyValuePair"])[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/api/v1/SavePaymentMethodHostedForm/{formId}": {
    /** The SavePaymentMethodHostedForm. */
    get: {
      /** The SavePaymentMethodHostedForm. */
      parameters: {
          /** @description The transactionIdSystem.Guid. */
        query?: {
          transactionId?: string;
        };
          /** @description The formIdSystem.Int32. */
        path: {
          formId: number;
        };
      };
      responses: {
        /** @description Success */
        200: never;
      };
    };
  };
  "/api/v1/TransactionAcknowledgment/product": {
    post: {
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["TransactionProductAcknowledgementViewModel"];
          "application/json": components["schemas"]["TransactionProductAcknowledgementViewModel"];
          "text/json": components["schemas"]["TransactionProductAcknowledgementViewModel"];
          "application/*+json": components["schemas"]["TransactionProductAcknowledgementViewModel"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["HttpStatusCode"];
            "application/json": components["schemas"]["HttpStatusCode"];
            "text/json": components["schemas"]["HttpStatusCode"];
          };
        };
      };
    };
  };
  "/api/v1/TransactionAcknowledgment/customer": {
    post: {
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["TransactionCustomerAcknowledgementViewModel"];
          "application/json": components["schemas"]["TransactionCustomerAcknowledgementViewModel"];
          "text/json": components["schemas"]["TransactionCustomerAcknowledgementViewModel"];
          "application/*+json": components["schemas"]["TransactionCustomerAcknowledgementViewModel"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["HttpStatusCode"];
            "application/json": components["schemas"]["HttpStatusCode"];
            "text/json": components["schemas"]["HttpStatusCode"];
          };
        };
      };
    };
  };
  "/api/v1/TransactionMetrics/generate": {
    post: {
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["GenerateTransactionMetricsViewModel"];
          "application/json": components["schemas"]["GenerateTransactionMetricsViewModel"];
          "text/json": components["schemas"]["GenerateTransactionMetricsViewModel"];
          "application/*+json": components["schemas"]["GenerateTransactionMetricsViewModel"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ResponseEnvelope"];
            "application/json": components["schemas"]["ResponseEnvelope"];
            "text/json": components["schemas"]["ResponseEnvelope"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/plain": components["schemas"]["ResponseEnvelope"];
            "application/json": components["schemas"]["ResponseEnvelope"];
            "text/json": components["schemas"]["ResponseEnvelope"];
          };
        };
        /** @description Server Error */
        500: {
          content: {
            "text/plain": components["schemas"]["ResponseEnvelope"];
            "application/json": components["schemas"]["ResponseEnvelope"];
            "text/json": components["schemas"]["ResponseEnvelope"];
          };
        };
      };
    };
  };
  "/api/v1/VerifyTransaction": {
    /** Verifies a transaction token and responds with the transaction. */
    post: {
      /** Verifies a transaction token and responds with the transaction. */
      /** @description An object holding the token needing verification */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["ValidateTransactionRequestDto"];
          "application/json": components["schemas"]["ValidateTransactionRequestDto"];
          "text/json": components["schemas"]["ValidateTransactionRequestDto"];
          "application/*+json": components["schemas"]["ValidateTransactionRequestDto"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["ValidateTransactionResultDto"];
            "application/json": components["schemas"]["ValidateTransactionResultDto"];
            "text/json": components["schemas"]["ValidateTransactionResultDto"];
          };
        };
      };
    };
  };
  "/api/v1/Void": {
    /** Voids the specified charge */
    post: {
      /** Voids the specified charge */
      /** @description An object describing the transaction to void. */
      requestBody?: {
        content: {
          "application/json-patch+json": components["schemas"]["CreditCardVoidRequestViewModel"];
          "application/json": components["schemas"]["CreditCardVoidRequestViewModel"];
          "text/json": components["schemas"]["CreditCardVoidRequestViewModel"];
          "application/*+json": components["schemas"]["CreditCardVoidRequestViewModel"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            "text/plain": components["schemas"]["CreditCardVoidResultDto"];
            "application/json": components["schemas"]["CreditCardVoidResultDto"];
            "text/json": components["schemas"]["CreditCardVoidResultDto"];
          };
        };
        /** @description Bad Request */
        400: never;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AbandonedTransactionRequest: {
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
    };
    ActionLinkViewModel: {
      href?: string | null;
      type?: string | null;
    };
    BaseViewModel: Record<string, never>;
    BraintreeExportRequestDto: {
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
      environment?: components["schemas"]["EnvironmentType"];
    };
    BraintreeExportResultDto: {
      /** Format: uuid */
      cpPayTransactionId?: string;
      braintreeId?: string | null;
      transactionType?: components["schemas"]["ChargeType"];
      /** Format: double */
      amount?: number;
      /** Format: int32 */
      resultCode?: number;
      errorCode?: components["schemas"]["LocalErrorCode"];
      errorMessage?: string | null;
      /** Format: date-time */
      createdAt?: string;
    };
    /**
     * Format: int32 
     * @enum {integer}
     */
    ChargeStatus: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
    /**
     * Format: int32 
     * @enum {integer}
     */
    ChargeType: 1 | 2 | 3 | 4 | 5 | 6 | 7;
    CreateSavePaymentMethodHostedFormViewModel: {
      /** @description Gets or sets the RedirectUri */
      redirectUri?: string | null;
      /** @description Gets or sets the Error Redirect Uri */
      onErrorRedirectUri?: string | null;
      billingUser?: components["schemas"]["UserInfoViewModel"];
      billingAddress?: components["schemas"]["UserAddressViewModel"];
      user?: components["schemas"]["UserExtendedInfoViewModel"];
      paymentType?: components["schemas"]["PaymentType"];
      previousTransactionToken?: string | null;
    };
    CreditCardRefundResultDto: {
      /** Format: uuid */
      transactionId?: string;
      isSuccess?: boolean;
      errors?: (components["schemas"]["ErrorDto"])[] | null;
    };
    /**
     * Format: int32 
     * @enum {integer}
     */
    CreditCardType: 0 | 1 | 2 | 3 | 4 | 5 | 6;
    CreditCardVoidRequestViewModel: {
      transactionId?: string | null;
    };
    CreditCardVoidResultDto: {
      /** Format: uuid */
      transactionId?: string;
      isSuccess?: boolean;
      errors?: (components["schemas"]["ErrorDto"])[] | null;
    };
    EmvChipCardRawResultDto: {
      formToken?: string | null;
      rawData?: string | null;
    };
    /**
     * Format: int32 
     * @enum {integer}
     */
    EnvironmentType: 1 | 2;
    /** @enum {string} */
    ErrorCodeEnum: "NoError" | "BadRequest" | "Unauthorized" | "NotFound" | "Unavailable" | "InvalidApiCredentials" | "CardTypeNotEnabled" | "MissingRequestFields" | "InvalidConfiguration" | "BlockedIpAddress" | "OperationNotSupported" | "UnknownInternalError" | "TransactionCanceled" | "SecurityTokenMismatch" | "ExpiredSession" | "OutstandingTransactionsExist" | "MissingFormFields" | "UnknownOrInvalidTokenData" | "CardNumberInvalid" | "CardLimitExceeded" | "CardExpired" | "CardExpirationInvalid" | "CardCvvInvalid" | "CardAvsFailed" | "CardDeclined" | "CardDeclinedFraud" | "CardDeclinedCallForApproval" | "CardDeclinedCallIssuer" | "CardDeclinedPossibleLost" | "CardDeclinedPossibleStolen" | "CardDeclinedLostOrStolen" | "CardDeclinedPickUpCard" | "CardDeclinedInsufficientFunds" | "CardDeclinedNoAccount" | "CardDeclinedContactIssuingBank" | "CardDeclinedByDevice" | "CardPartialApproval" | "CardNotFound" | "CardDeclinedLost" | "CardDeclinedStolen" | "CardDeclinedWrongPin" | "CardDeclinedInvalid" | "CardDeclinedWithdrawLimit" | "CardDeclinedPossibleFraud" | "CardDeclinedWrongPinLimit" | "CardOk" | "CardDeclinedCantVerifyPin" | "SignatureDeclined" | "CardDeclinedPartialAuth" | "CardDeclinedSwipeOnly" | "CardDeclinedTrackInvalid" | "CardDeclinedSwipeError" | "CardDeclinedChipError" | "CardMismatch" | "PaymentMethodNotSupported" | "AmountInvalid" | "AmountLimitExceeded" | "InvalidCurrency" | "DuplicateTransaction" | "InvalidTransaction" | "TransactionNotAllowedCallIssuer" | "TransactionAbandoned" | "TransactionReenter" | "TransactionReversalDataDoesNotMatchIssuer" | "TransactionTimeOut" | "TransactionStopSingleRecurringPayment" | "TransactionStopRecurringPayment" | "TransactionStopAllRecurringPaymentsForThisCard" | "TransactionTerminalIdError" | "TransactionAborted" | "TransactionUnsupported" | "TransactionAlreadyVoided" | "TransactionInvalidTaxExceedAmount" | "TransactionNotFound" | "TransactionDataMismatch" | "TransactionResponseDataMissing" | "TransactionAlreadyRefunded" | "TransactionAlreadyCaptured" | "TransactionRejected" | "TransactionDisputed" | "TransactionAlreadyInProgress" | "TransactionCaptureFailed" | "TransactionVoidFailed" | "TransactionAuthorizationFailed" | "TransactionSavePaymentFailed" | "TransactionListRetrievalFailed" | "TemporaryErrorPleaseTryAgain" | "TemporaryErrorDoNotTryAgain" | "UnknownMerchantError" | "UnsupportedDataFormatError" | "InvalidRequestToGateway" | "GatewayOperationError" | "CustomerDataCouldNotBeFound" | "MerchantClosed" | "SecViolation" | "DateError" | "CheckDigitError" | "CIDFormatError" | "MerchantTransactionLimitExceeded" | "InvalidGatewayConfigurationCredentials" | "TerminalRemoveCardFirst" | "TerminalUnsupportedEDC" | "TerminalBatchFailed" | "TerminalConnectionError" | "TerminalReceiveMessageError" | "TerminalCommunicationError" | "TerminalVariableError" | "TerminalPINPadError" | "TerminalUnknownError" | "TerminalNoHostApp" | "TerminalSettlementRequested" | "TerminalPartialBatchClosed" | "TerminalPrinterNotSupported" | "TerminalPrinterDisabled" | "TerminalPrinterOutOfPaper" | "TerminalInternalError" | "TerminalSendMessageError" | "TerminalUnsupportedCommand" | "TerminalTypeInvalid" | "TerminalInvalid" | "TerminalUpdatePending" | "AccountError" | "AccountOnHold" | "AccountRoutingError" | "AccountNumberInvalid";
    ErrorDto: {
      message?: string | null;
      /** Format: int32 */
      code?: number;
    };
    ErrorViewModel: {
      message?: string | null;
      code?: components["schemas"]["ErrorCodeEnum"];
    };
    /**
     * Format: int32 
     * @enum {integer}
     */
    FeatureType: 0 | 1;
    /**
     * Format: int32 
     * @enum {integer}
     */
    GatewayType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
    GenerateTransactionMetricsViewModel: {
      /** Format: date-time */
      metricDate?: string;
    };
    GetGatewayConfigurationFeatureInformationViewModel: {
      features?: (components["schemas"]["FeatureType"])[] | null;
      gateway?: components["schemas"]["GatewayType"];
      isEmvEnabled?: boolean;
    };
    HostedFormDto: {
      /** Format: int32 */
      id?: number;
      /** Format: double */
      amount?: number;
      orderNumber?: string | null;
      redirectUri?: string | null;
      onErrorRedirectUri?: string | null;
      onErrorPostbackUri?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      address1?: string | null;
      address2?: string | null;
      city?: string | null;
      state?: string | null;
      zip?: string | null;
      phoneNumber?: string | null;
      email?: string | null;
      cardToken?: string | null;
      paymentType?: components["schemas"]["PaymentType"];
      savePaymentMethod?: boolean;
      token?: string | null;
      /** Format: uuid */
      transactionId?: string;
      /** Format: int32 */
      paymentGatewayAccountId?: number;
      webhookOnTransactionCompleteUri?: string | null;
    };
    HostedFormRequestDto: {
      /** Format: double */
      amount?: number;
      orderNumber?: string | null;
      redirectUri?: string | null;
      onErrorRedirectUri?: string | null;
      onErrorPostbackUri?: string | null;
      webhooks?: components["schemas"]["HostedFormWebhooks"];
      firstName?: string | null;
      lastName?: string | null;
      address1?: string | null;
      address2?: string | null;
      city?: string | null;
      state?: string | null;
      zip?: string | null;
      phoneNumber?: string | null;
      email?: string | null;
      cardToken?: string | null;
      savePaymentMethod?: boolean;
      paymentType?: components["schemas"]["PaymentType"];
    };
    HostedFormWebhooks: {
      onTransactionCompleteUri?: string | null;
    };
    /**
     * Format: int32 
     * @enum {integer}
     */
    HttpStatusCode: 100 | 101 | 102 | 103 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 | 226 | 300 | 301 | 302 | 303 | 304 | 305 | 306 | 307 | 308 | 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 421 | 422 | 423 | 424 | 426 | 428 | 429 | 431 | 451 | 500 | 501 | 502 | 503 | 504 | 505 | 506 | 507 | 508 | 510 | 511;
    /**
     * Format: int32 
     * @enum {integer}
     */
    LocalErrorCode: 0 | 400 | 401 | 404 | 503 | 1001 | 1002 | 1003 | 1004 | 1005 | 1006 | 1007 | 1008 | 1009 | 1010 | 1012 | 1013 | 1014 | 2001 | 2002 | 2003 | 2004 | 2005 | 2006 | 2007 | 2008 | 2009 | 2010 | 2011 | 2012 | 2013 | 2014 | 2015 | 2016 | 2017 | 2018 | 2019 | 2020 | 2021 | 2022 | 2023 | 2024 | 2025 | 2026 | 2027 | 2028 | 2029 | 2030 | 2031 | 2032 | 2033 | 2034 | 2035 | 2036 | 2050 | 2100 | 2101 | 2102 | 3001 | 3002 | 3003 | 3004 | 3005 | 3006 | 3007 | 3008 | 3009 | 3010 | 3011 | 3012 | 3013 | 3014 | 3015 | 3016 | 3017 | 3018 | 3019 | 3020 | 3021 | 3022 | 3023 | 3024 | 3025 | 3026 | 3027 | 3028 | 4001 | 4002 | 5001 | 5002 | 5003 | 5004 | 5005 | 5006 | 5007 | 5008 | 5009 | 5010 | 5011 | 5012 | 6000 | 6001 | 6002 | 6003 | 6004 | 6005 | 6006 | 6007 | 6008 | 6009 | 6010 | 6011 | 6012 | 6013 | 6014 | 6015 | 6016 | 6017 | 6018 | 6019 | 6020 | 7001 | 7002 | 7004 | 7005;
    MerchantActivityDto: {
      /** Format: int32 */
      id?: number;
      chargeTypeId?: components["schemas"]["ChargeType"];
      paymentTypeId?: components["schemas"]["PaymentType"];
      /** Format: double */
      amount?: number;
      merchantCode?: string | null;
      /** Format: uuid */
      transactionId?: string;
      /** Format: int32 */
      resultCode?: number;
      errorCode?: components["schemas"]["LocalErrorCode"];
      errorCodeDescription?: string | null;
      rawData?: string | null;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      deletedAt?: string | null;
    };
    MigrateSavedCardRequestDto: {
      savedCardsToMigrate?: (components["schemas"]["SavedCardDto"])[] | null;
    };
    MigrateSavedCardResponseDto: {
      isError?: boolean;
      errorMessage?: string | null;
      migratedCards?: (components["schemas"]["SavedCardResultDto"])[] | null;
    };
    PaymentRefundRequestViewModel: {
      transactionId?: string | null;
      /** Format: double */
      amount?: number;
    };
    /**
     * Format: int32 
     * @enum {integer}
     */
    PaymentType: 1 | 2;
    /**
     * Format: int32 
     * @enum {integer}
     */
    ProductType: 0 | 1 | 2 | 3;
    ResponseEnvelope: {
      result?: components["schemas"]["BaseViewModel"];
      /** Format: date-time */
      timeGenerated?: string;
      isSuccess?: boolean;
      error?: components["schemas"]["ErrorViewModel"];
      links?: Record<string, unknown> | null;
    };
    /** @enum {string} */
    ResponseTypeEnum: "Incomplete" | "Success" | "Fail";
    SavePaymentMethodHostedFormDto: {
      /** Format: int32 */
      id?: number;
      redirectUri?: string | null;
      onErrorRedirectUri?: string | null;
      billingUser?: components["schemas"]["UserInfo"];
      billingAddress?: components["schemas"]["UserAddress"];
      user?: components["schemas"]["UserExtendedInfo"];
      /** Format: uuid */
      transactionId?: string;
      /** Format: int32 */
      paymentGatewayAccountId?: number;
      paymentType?: components["schemas"]["PaymentType"];
      previousTransactionToken?: string | null;
      token?: string | null;
    };
    SavedCardDto: {
      requestId?: string | null;
      merchantCustomerId?: string | null;
      merchantPaymentId?: string | null;
      lastFour?: string | null;
      /** Format: int32 */
      expMonth?: number;
      /** Format: int32 */
      expYear?: number;
      cardBrand?: components["schemas"]["CreditCardType"];
    };
    SavedCardResultDto: {
      isError?: boolean;
      errorMessage?: string | null;
      requestId?: string | null;
      transactionToken?: string | null;
    };
    SavedChargeRequestDto: {
      /** Format: double */
      amount?: number;
      cardToken?: string | null;
      orderNumber?: string | null;
      billingAddress?: components["schemas"]["UserAddressViewModel"];
    };
    SavedChargeResultDto: {
      /** Format: uuid */
      transactionId?: string;
      transactionToken?: string | null;
      orderNumber?: string | null;
      isSuccess?: boolean;
      errors?: (components["schemas"]["ErrorDto"])[] | null;
    };
    SavedPaymentRemoveRequestDto: {
      cardToken?: string | null;
    };
    /** @enum {string} */
    SignatureFormatEnum: "RawData" | "Png" | "SigBin2";
    StringStringValuesKeyValuePair: {
      key?: string | null;
      value?: (string)[];
    };
    TransactionCustomerAcknowledgementViewModel: {
      transactionId?: string | null;
      customerData?: string | null;
    };
    TransactionDataRequestDto: {
      /** Format: date-time */
      from?: string;
      /** Format: date-time */
      to?: string;
      /** Format: int32 */
      dateTimeOffset?: number;
      transactionTypes?: (components["schemas"]["TransactionTypeEnum"])[] | null;
      transactionStates?: (components["schemas"]["TransactionStateEnum"])[] | null;
      responseType?: (components["schemas"]["ResponseTypeEnum"])[] | null;
      /** Format: uuid */
      transactionId?: string;
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      limit?: number;
      /** Format: double */
      amount?: number | null;
      merchantCode?: string | null;
      lastFour?: string | null;
    };
    TransactionDataResultDto: {
      /** Format: int32 */
      count?: number;
      results?: (components["schemas"]["MerchantActivityDto"])[] | null;
    };
    TransactionProductAcknowledgementViewModel: {
      transactionId?: string | null;
      product?: components["schemas"]["ProductType"];
    };
    /** @enum {string} */
    TransactionStateEnum: "InProgress" | "Authorized" | "Captured" | "Voided" | "PartiallyRefunded" | "CompletelyRefunded" | "Declined" | "Errored" | "Canceled" | "Abandoned" | "Completed";
    /** @enum {string} */
    TransactionTypeEnum: "Unknown" | "HostedFormAuthorization" | "HostedFormSale" | "HostedFormSavePaymentMethod" | "SystemSavePaymentMethod" | "SavedPaymentMethodAuthorization" | "SavedPaymentMethodSale" | "SavedPaymentMethodRemove" | "AuthorizationCapture" | "Void" | "Refund";
    UserAddress: {
      address1?: string | null;
      address2?: string | null;
      city?: string | null;
      state?: string | null;
      zip?: string | null;
    };
    UserAddressViewModel: {
      address1?: string | null;
      address2?: string | null;
      city?: string | null;
      state?: string | null;
      zip?: string | null;
    };
    UserExtendedInfo: {
      /** Format: uuid */
      civicPlusPlatformUserId?: string | null;
      thirdPartyUserId?: string | null;
      email?: string | null;
      firstname?: string | null;
      fullName?: string | null;
      lastname?: string | null;
      phoneNumber?: string | null;
    };
    UserExtendedInfoViewModel: {
      /** Format: uuid */
      civicPlusPlatformUserId?: string | null;
      thirdPartyUserId?: string | null;
      email?: string | null;
      firstname?: string | null;
      lastname?: string | null;
      phoneNumber?: string | null;
    };
    UserInfo: {
      email?: string | null;
      firstname?: string | null;
      fullName?: string | null;
      lastname?: string | null;
      phoneNumber?: string | null;
    };
    UserInfoViewModel: {
      email?: string | null;
      firstname?: string | null;
      lastname?: string | null;
      phoneNumber?: string | null;
    };
    ValidateTransactionRequestDto: {
      token?: string | null;
      signatureFormat?: components["schemas"]["SignatureFormatEnum"];
    };
    ValidateTransactionResultDto: {
      /** Format: uuid */
      transactionId?: string;
      transactionToken?: string | null;
      merchantCode?: string | null;
      orderNumber?: string | null;
      chargeTypeId?: components["schemas"]["ChargeType"];
      creditCardTypeId?: components["schemas"]["CreditCardType"];
      paymentTypeId?: components["schemas"]["PaymentType"];
      /** Format: double */
      amount?: number;
      lastFour?: string | null;
      /** Format: int32 */
      expMonth?: number;
      /** Format: int32 */
      expYear?: number;
      /** Format: int64 */
      resultCode?: number;
      errorCode?: components["schemas"]["LocalErrorCode"];
      errorMessage?: string | null;
      savedPaymentMethodToken?: string | null;
      customerReceipt?: string | null;
      merchantReceipt?: string | null;
      initialChargeStatusId?: components["schemas"]["ChargeStatus"];
      currentChargeStatusId?: components["schemas"]["ChargeStatus"];
      /** Format: date-time */
      currentChargeStatusDtm?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      deletedAt?: string | null;
      customerSignature?: string | null;
      customerSignatureFormat?: components["schemas"]["SignatureFormatEnum"];
      isSuccessSavedPaymentMethod?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
