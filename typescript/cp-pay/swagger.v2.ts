/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v2/HostedForm": {
    post: operations["CreateHostedForm"];
  };
  "/api/v2/HostedForm/{hostedFormToken}/Display": {
    get: operations["DisplayHostedForm"];
  };
  "/api/v2/SavedPaymentMethod/PerformTransaction": {
    /** Perform a transaction against a saved payment method. */
    post: operations["PerformTransaction"];
  };
  "/api/v2/Transaction/{transactionId}/Details": {
    get: operations["GetTransactionDetails"];
  };
  "/api/v2/Transaction/{transactionId}/Capture": {
    /** Capture an authorized transaction by its transaction id. */
    patch: operations["CaptureTransaction"];
  };
  "/api/v2/Transaction/{transactionId}/Void": {
    /** Void a transaction by its transaction id. */
    patch: operations["VoidTransaction"];
  };
  "/api/v2/Transaction/{transactionId}/Refund": {
    /** Refund a transaction by its transaction id. */
    post: operations["RefundTransaction"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ActionLinkViewModel: {
      href?: string | null;
      type?: string | null;
    };
    BaseViewModel: Record<string, never>;
    CreateHostedFormViewModel: {
      /** Format: double */
      amount?: number;
      externalReferenceId?: string | null;
      type?: components["schemas"]["HostedFormTypeEnum"];
      fallbackType?: components["schemas"]["HostedFormTypeEnum"];
      redirects?: components["schemas"]["HostedFormRedirectsViewModel"];
      webhooks?: components["schemas"]["HostedFormWebhooksViewModel"];
      billingUser?: components["schemas"]["UserInfoViewModel"];
      billingAddress?: components["schemas"]["UserAddressViewModel"];
      savePaymentMethod?: boolean;
      previousTransactionToken?: string | null;
      paymentType?: components["schemas"]["PaymentTypeEnum"];
    };
    /** @enum {string} */
    ErrorCodeEnum: "NoError" | "BadRequest" | "Unauthorized" | "NotFound" | "Unavailable" | "InvalidApiCredentials" | "CardTypeNotEnabled" | "MissingRequestFields" | "InvalidConfiguration" | "BlockedIpAddress" | "OperationNotSupported" | "UnknownInternalError" | "TransactionCanceled" | "SecurityTokenMismatch" | "ExpiredSession" | "OutstandingTransactionsExist" | "MissingFormFields" | "UnknownOrInvalidTokenData" | "CardNumberInvalid" | "CardLimitExceeded" | "CardExpired" | "CardExpirationInvalid" | "CardCvvInvalid" | "CardAvsFailed" | "CardDeclined" | "CardDeclinedFraud" | "CardDeclinedCallForApproval" | "CardDeclinedCallIssuer" | "CardDeclinedPossibleLost" | "CardDeclinedPossibleStolen" | "CardDeclinedLostOrStolen" | "CardDeclinedPickUpCard" | "CardDeclinedInsufficientFunds" | "CardDeclinedNoAccount" | "CardDeclinedContactIssuingBank" | "CardDeclinedByDevice" | "CardPartialApproval" | "CardNotFound" | "CardDeclinedLost" | "CardDeclinedStolen" | "CardDeclinedWrongPin" | "CardDeclinedInvalid" | "CardDeclinedWithdrawLimit" | "CardDeclinedPossibleFraud" | "CardDeclinedWrongPinLimit" | "CardOk" | "CardDeclinedCantVerifyPin" | "SignatureDeclined" | "CardDeclinedPartialAuth" | "CardDeclinedSwipeOnly" | "CardDeclinedTrackInvalid" | "CardDeclinedSwipeError" | "CardDeclinedChipError" | "CardMismatch" | "PaymentMethodNotSupported" | "AmountInvalid" | "AmountLimitExceeded" | "InvalidCurrency" | "DuplicateTransaction" | "InvalidTransaction" | "TransactionNotAllowedCallIssuer" | "TransactionAbandoned" | "TransactionReenter" | "TransactionReversalDataDoesNotMatchIssuer" | "TransactionTimeOut" | "TransactionStopSingleRecurringPayment" | "TransactionStopRecurringPayment" | "TransactionStopAllRecurringPaymentsForThisCard" | "TransactionTerminalIdError" | "TransactionAborted" | "TransactionUnsupported" | "TransactionAlreadyVoided" | "TransactionInvalidTaxExceedAmount" | "TransactionNotFound" | "TransactionDataMismatch" | "TransactionResponseDataMissing" | "TransactionAlreadyRefunded" | "TransactionAlreadyCaptured" | "TransactionRejected" | "TransactionDisputed" | "TransactionAlreadyInProgress" | "TransactionCaptureFailed" | "TransactionVoidFailed" | "TransactionAuthorizationFailed" | "TransactionSavePaymentFailed" | "TransactionListRetrievalFailed" | "TemporaryErrorPleaseTryAgain" | "TemporaryErrorDoNotTryAgain" | "UnknownMerchantError" | "UnsupportedDataFormatError" | "InvalidRequestToGateway" | "GatewayOperationError" | "CustomerDataCouldNotBeFound" | "MerchantClosed" | "SecViolation" | "DateError" | "CheckDigitError" | "CIDFormatError" | "MerchantTransactionLimitExceeded" | "InvalidGatewayConfigurationCredentials" | "TerminalRemoveCardFirst" | "TerminalUnsupportedEDC" | "TerminalBatchFailed" | "TerminalConnectionError" | "TerminalReceiveMessageError" | "TerminalCommunicationError" | "TerminalVariableError" | "TerminalPINPadError" | "TerminalUnknownError" | "TerminalNoHostApp" | "TerminalSettlementRequested" | "TerminalPartialBatchClosed" | "TerminalPrinterNotSupported" | "TerminalPrinterDisabled" | "TerminalPrinterOutOfPaper" | "TerminalInternalError" | "TerminalSendMessageError" | "TerminalUnsupportedCommand" | "TerminalTypeInvalid" | "TerminalInvalid" | "TerminalUpdatePending" | "AccountError" | "AccountOnHold" | "AccountRoutingError" | "AccountNumberInvalid";
    ErrorViewModel: {
      message?: string | null;
      code?: components["schemas"]["ErrorCodeEnum"];
    };
    HostedFormRedirectsViewModel: {
      onComplete?: string | null;
      onError?: string | null;
    };
    /** @enum {string} */
    HostedFormTypeEnum: "Authorization" | "Sale";
    HostedFormViewModel: {
      token?: string | null;
      /** Format: double */
      amount?: number;
      externalReferenceId?: string | null;
      redirects?: components["schemas"]["HostedFormRedirectsViewModel"];
      webhooks?: components["schemas"]["HostedFormWebhooksViewModel"];
      billingUser?: components["schemas"]["UserInfoViewModel"];
      billingAddress?: components["schemas"]["UserAddressViewModel"];
      savePaymentMethod?: boolean;
      previousTransactionToken?: string | null;
      paymentType?: components["schemas"]["PaymentTypeEnum"];
      /** Format: date-time */
      createdOnUtc?: string;
      /** Format: uuid */
      transactionId?: string;
      transactionType?: components["schemas"]["TransactionTypeEnum"];
    };
    HostedFormViewModelResponseEnvelope: {
      result?: components["schemas"]["HostedFormViewModel"];
      /** Format: date-time */
      timeGenerated?: string;
      isSuccess?: boolean;
      error?: components["schemas"]["ErrorViewModel"];
      links?: {
        readonly display?: components["schemas"]["ActionLinkViewModel"];
      } | null;
    };
    HostedFormWebhooksViewModel: {
      onComplete?: string | null;
      onError?: string | null;
    };
    /** @enum {string} */
    PaymentMethodTypeEnum: "Unknown" | "Visa" | "MasterCard" | "Amex" | "Discover" | "Checking" | "Savings";
    /** @enum {string} */
    PaymentTypeEnum: "CreditDebitCard" | "Ach";
    ResponseEnvelope: {
      result?: components["schemas"]["BaseViewModel"];
      /** Format: date-time */
      timeGenerated?: string;
      isSuccess?: boolean;
      error?: components["schemas"]["ErrorViewModel"];
      links?: Record<string, unknown> | null;
    };
    /** @enum {string} */
    ResponseTypeEnum: "Incomplete" | "Success" | "Fail";
    SavedPaymentMethodPerformTransactionViewModel: {
      savedPaymentMethodToken?: string | null;
      /** Format: double */
      amount?: number;
      externalReferenceId?: string | null;
      transactionType?: components["schemas"]["SavedPaymentMethodTransactionTypeEnum"];
      fallbackTransactionType?: components["schemas"]["SavedPaymentMethodTransactionTypeEnum"];
      billingAddress?: components["schemas"]["UserAddressViewModel"];
    };
    /** @enum {string} */
    SavedPaymentMethodTransactionTypeEnum: "Authorization" | "Sale";
    /** @enum {string} */
    SignatureFormatEnum: "RawData" | "Png" | "SigBin2";
    StringStringValuesKeyValuePair: {
      key?: string | null;
      value?: (string)[];
    };
    TransactionDetailsViewModel: {
      type?: components["schemas"]["TransactionTypeEnum"];
      /** Format: uuid */
      id?: string;
      token?: string | null;
      state?: components["schemas"]["TransactionStateEnum"];
      externalReferenceId?: string | null;
      merchantCode?: string | null;
      paymentMethodType?: components["schemas"]["PaymentMethodTypeEnum"];
      lastFour?: string | null;
      /** Format: int32 */
      expMonth?: number | null;
      /** Format: int32 */
      expYear?: number | null;
      paymentType?: components["schemas"]["PaymentTypeEnum"];
      /** Format: double */
      amount?: number;
      responseType?: components["schemas"]["ResponseTypeEnum"];
      errorCode?: components["schemas"]["ErrorCodeEnum"];
      customerReceipt?: string | null;
      merchantReceipt?: string | null;
      customerSignatureFormat?: components["schemas"]["SignatureFormatEnum"];
      customerSignature?: string | null;
      savedPaymentMethodToken?: string | null;
      isSuccessSavedPaymentMethod?: boolean;
      /** Format: date-time */
      createdOnUtc?: string;
      /** Format: date-time */
      lastModifiedOnUtc?: string;
    };
    TransactionDetailsViewModelResponseEnvelope: {
      result?: components["schemas"]["TransactionDetailsViewModel"];
      /** Format: date-time */
      timeGenerated?: string;
      isSuccess?: boolean;
      error?: components["schemas"]["ErrorViewModel"];
      links?: {
        readonly details?: components["schemas"]["ActionLinkViewModel"];
        readonly capture?: components["schemas"]["ActionLinkViewModel"];
        readonly void?: components["schemas"]["ActionLinkViewModel"];
        readonly refund?: components["schemas"]["ActionLinkViewModel"];
      } | null;
    };
    TransactionRefundRequestViewModel: {
      /** Format: double */
      amount?: number;
    };
    /** @enum {string} */
    TransactionStateEnum: "InProgress" | "Authorized" | "Captured" | "Voided" | "PartiallyRefunded" | "CompletelyRefunded" | "Declined" | "Errored" | "Canceled" | "Abandoned" | "Completed";
    /** @enum {string} */
    TransactionTypeEnum: "Unknown" | "HostedFormAuthorization" | "HostedFormSale" | "HostedFormSavePaymentMethod" | "SystemSavePaymentMethod" | "SavedPaymentMethodAuthorization" | "SavedPaymentMethodSale" | "SavedPaymentMethodRemove" | "AuthorizationCapture" | "Void" | "Refund";
    UserAddressViewModel: {
      address1?: string | null;
      address2?: string | null;
      city?: string | null;
      state?: string | null;
      zip?: string | null;
    };
    UserInfoViewModel: {
      email?: string | null;
      firstname?: string | null;
      lastname?: string | null;
      phoneNumber?: string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  CreateHostedForm: {
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["CreateHostedFormViewModel"];
        "application/json": components["schemas"]["CreateHostedFormViewModel"];
        "text/json": components["schemas"]["CreateHostedFormViewModel"];
        "application/*+json": components["schemas"]["CreateHostedFormViewModel"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "text/plain": components["schemas"]["HostedFormViewModelResponseEnvelope"];
          "application/json": components["schemas"]["HostedFormViewModelResponseEnvelope"];
          "text/json": components["schemas"]["HostedFormViewModelResponseEnvelope"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Server Error */
      500: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
    };
  };
  DisplayHostedForm: {
    parameters: {
      path: {
        hostedFormToken: string;
      };
    };
    responses: {
      /** @description Success */
      200: never;
    };
  };
  PerformTransaction: {
    /** Perform a transaction against a saved payment method. */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["SavedPaymentMethodPerformTransactionViewModel"];
        "application/json": components["schemas"]["SavedPaymentMethodPerformTransactionViewModel"];
        "text/json": components["schemas"]["SavedPaymentMethodPerformTransactionViewModel"];
        "application/*+json": components["schemas"]["SavedPaymentMethodPerformTransactionViewModel"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "text/plain": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "application/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "text/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Server Error (If possible, the response "result" property will contain the transaction's details, but could be empty depending on the error.) */
      500: {
        content: {
          "text/plain": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "application/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "text/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
        };
      };
    };
  };
  GetTransactionDetails: {
    parameters: {
      path: {
        transactionId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "text/plain": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "application/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "text/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Server Error */
      500: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
    };
  };
  CaptureTransaction: {
    /** Capture an authorized transaction by its transaction id. */
    parameters: {
        /** @description The id of the transaction to capture. */
      path: {
        transactionId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "text/plain": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "application/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "text/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Server Error (If possible, the response "result" property will contain the transaction's details, but could be empty depending on the error.) */
      500: {
        content: {
          "text/plain": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "application/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "text/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
        };
      };
    };
  };
  VoidTransaction: {
    /** Void a transaction by its transaction id. */
    parameters: {
        /** @description The id of the transaction to void. */
      path: {
        transactionId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "text/plain": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "application/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "text/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Server Error (If possible, the response "result" property will contain the transaction's details, but could be empty depending on the error.) */
      500: {
        content: {
          "text/plain": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "application/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "text/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
        };
      };
    };
  };
  RefundTransaction: {
    /** Refund a transaction by its transaction id. */
    parameters: {
        /** @description The id of the transaction to refund. */
      path: {
        transactionId: string;
      };
    };
    /** @description The object containing the amount to refund for this transaction. */
    requestBody?: {
      content: {
        "application/json-patch+json": components["schemas"]["TransactionRefundRequestViewModel"];
        "application/json": components["schemas"]["TransactionRefundRequestViewModel"];
        "text/json": components["schemas"]["TransactionRefundRequestViewModel"];
        "application/*+json": components["schemas"]["TransactionRefundRequestViewModel"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "text/plain": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "application/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "text/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "text/plain": components["schemas"]["ResponseEnvelope"];
          "application/json": components["schemas"]["ResponseEnvelope"];
          "text/json": components["schemas"]["ResponseEnvelope"];
        };
      };
      /** @description Server Error (If possible, the response "result" property will contain the transaction's details, but could be empty depending on the error.) */
      500: {
        content: {
          "text/plain": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "application/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
          "text/json": components["schemas"]["TransactionDetailsViewModelResponseEnvelope"];
        };
      };
    };
  };
}
